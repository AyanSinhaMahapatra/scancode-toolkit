[
  "<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01//EN\"\n",
  "   \"http://www.w3.org/TR/html4/strict.dtd\">\n",
  "<html>\n",
  "<head>\n",
  "   Builtin Tokens &mdash; Pygments \n",
  "   \n",
  "   \n",
  "    body {\n",
  "    background-color: #f2f2f2;\n",
  "    margin: 0;\n",
  "    padding: 0;\n",
  "    font-family: 'Georgia', serif;\n",
  "    color: #111;\n",
  "}\n",
  "\n",
  "#content {\n",
  "    background-color: white;\n",
  "    padding: 20px;\n",
  "    margin: 20px auto 20px auto;\n",
  "    max-width: 800px;\n",
  "    border: 4px solid #ddd;\n",
  "}\n",
  "\n",
  "h1 {\n",
  "    font-weight: normal;\n",
  "    font-size: 40px;\n",
  "    color: #09839A;\n",
  "}\n",
  "\n",
  "h2 {\n",
  "    font-weight: normal;\n",
  "    font-size: 30px;\n",
  "    color: #C73F00;\n",
  "}\n",
  "\n",
  "h1.heading {\n",
  "    margin: 0 0 30px 0;\n",
  "}\n",
  "\n",
  "h2.subheading {\n",
  "    margin: -30px 0 0 45px;\n",
  "}\n",
  "\n",
  "h3 {\n",
  "    margin-top: 30px;\n",
  "}\n",
  "\n",
  "table.docutils {\n",
  "    border-collapse: collapse;\n",
  "    border: 2px solid #aaa;\n",
  "    margin: 0.5em 1.5em 0.5em 1.5em;\n",
  "}\n",
  "\n",
  "table.docutils td {\n",
  "    padding: 2px;\n",
  "    border: 1px solid #ddd;\n",
  "}\n",
  "\n",
  "p, li, dd, dt, blockquote {\n",
  "    font-size: 15px;\n",
  "    color: #333;\n",
  "}\n",
  "\n",
  "p {\n",
  "    line-height: 150%;\n",
  "    margin-bottom: 0;\n",
  "    margin-top: 10px;\n",
  "}\n",
  "\n",
  "hr {\n",
  "    border-top: 1px solid #ccc;\n",
  "    border-bottom: 0;\n",
  "    border-right: 0;\n",
  "    border-left: 0;\n",
  "    margin-bottom: 10px;\n",
  "    margin-top: 20px;\n",
  "}\n",
  "\n",
  "dl {\n",
  "    margin-left: 10px;\n",
  "}\n",
  "\n",
  "li, dt {\n",
  "    margin-top: 5px;\n",
  "}\n",
  "\n",
  "dt {\n",
  "    font-weight: bold;\n",
  "}\n",
  "\n",
  "th {\n",
  "    text-align: left;\n",
  "}\n",
  "\n",
  "a {\n",
  "    color: #990000;\n",
  "}\n",
  "\n",
  "a:hover {\n",
  "    color: #c73f00;\n",
  "}\n",
  "\n",
  "pre {\n",
  "    background-color: #f9f9f9;\n",
  "    border-top: 1px solid #ccc;\n",
  "    border-bottom: 1px solid #ccc;\n",
  "    padding: 5px;\n",
  "    font-size: 13px;\n",
  "    font-family: Bitstream Vera Sans Mono,monospace;\n",
  "}\n",
  "\n",
  "tt {\n",
  "    font-size: 13px;\n",
  "    font-family: Bitstream Vera Sans Mono,monospace;\n",
  "    color: black;\n",
  "    padding: 1px 2px 1px 2px;\n",
  "    background-color: #f0f0f0;\n",
  "}\n",
  "\n",
  "cite {\n",
  "    /* abusing  , it's generated by ReST for `x` */\n",
  "    font-size: 13px;\n",
  "    font-family: Bitstream Vera Sans Mono,monospace;\n",
  "    font-weight: bold;\n",
  "    font-style: normal;\n",
  "}\n",
  "\n",
  "#backlink {\n",
  "    float: right;\n",
  "    font-size: 11px;\n",
  "    color: #888;\n",
  "}\n",
  "\n",
  "div.toc {\n",
  "    margin: 0 0 10px 0;\n",
  "}\n",
  "\n",
  "div.toc h2 {\n",
  "    font-size: 20px;\n",
  "}\n",
  ".syntax  { background: #ffffff; }\n",
  ".syntax .c { color: #888888 } /* Comment */\n",
  ".syntax .err { color: #a61717; background-color: #e3d2d2 } /* Error */\n",
  ".syntax .k { color: #008800; font-weight: bold } /* Keyword */\n",
  ".syntax .cm { color: #888888 } /* Comment.Multiline */\n",
  ".syntax .cp { color: #cc0000; font-weight: bold } /* Comment.Preproc */\n",
  ".syntax .c1 { color: #888888 } /* Comment.Single */\n",
  ".syntax .cs { color: #cc0000; font-weight: bold; background-color: #fff0f0 } /* Comment.Special */\n",
  ".syntax .gd { color: #000000; background-color: #ffdddd } /* Generic.Deleted */\n",
  ".syntax .ge { font-style: italic } /* Generic.Emph */\n",
  ".syntax .gr { color: #aa0000 } /* Generic.Error */\n",
  ".syntax .gh { color: #303030 } /* Generic.Heading */\n",
  ".syntax .gi { color: #000000; background-color: #ddffdd } /* Generic.Inserted */\n",
  ".syntax .go { color: #888888 } /* Generic.Output */\n",
  ".syntax .gp { color: #555555 } /* Generic.Prompt */\n",
  ".syntax .gs { font-weight: bold } /* Generic.Strong */\n",
  ".syntax .gu { color: #606060 } /* Generic.Subheading */\n",
  ".syntax .gt { color: #aa0000 } /* Generic.Traceback */\n",
  ".syntax .kc { color: #008800; font-weight: bold } /* Keyword.Constant */\n",
  ".syntax .kd { color: #008800; font-weight: bold } /* Keyword.Declaration */\n",
  ".syntax .kp { color: #008800 } /* Keyword.Pseudo */\n",
  ".syntax .kr { color: #008800; font-weight: bold } /* Keyword.Reserved */\n",
  ".syntax .kt { color: #888888; font-weight: bold } /* Keyword.Type */\n",
  ".syntax .m { color: #0000DD; font-weight: bold } /* Literal.Number */\n",
  ".syntax .s { color: #dd2200; background-color: #fff0f0 } /* Literal.String */\n",
  ".syntax .na { color: #336699 } /* Name.Attribute */\n",
  ".syntax .nb { color: #003388 } /* Name.Builtin */\n",
  ".syntax .nc { color: #bb0066; font-weight: bold } /* Name.Class */\n",
  ".syntax .no { color: #003366; font-weight: bold } /* Name.Constant */\n",
  ".syntax .nd { color: #555555 } /* Name.Decorator */\n",
  ".syntax .ne { color: #bb0066; font-weight: bold } /* Name.Exception */\n",
  ".syntax .nf { color: #0066bb; font-weight: bold } /* Name.Function */\n",
  ".syntax .nl { color: #336699; font-style: italic } /* Name.Label */\n",
  ".syntax .nn { color: #bb0066; font-weight: bold } /* Name.Namespace */\n",
  ".syntax .py { color: #336699; font-weight: bold } /* Name.Property */\n",
  ".syntax .nt { color: #bb0066; font-weight: bold } /* Name.Tag */\n",
  ".syntax .nv { color: #336699 } /* Name.Variable */\n",
  ".syntax .ow { color: #008800 } /* Operator.Word */\n",
  ".syntax .w { color: #bbbbbb } /* Text.Whitespace */\n",
  ".syntax .mf { color: #0000DD; font-weight: bold } /* Literal.Number.Float */\n",
  ".syntax .mh { color: #0000DD; font-weight: bold } /* Literal.Number.Hex */\n",
  ".syntax .mi { color: #0000DD; font-weight: bold } /* Literal.Number.Integer */\n",
  ".syntax .mo { color: #0000DD; font-weight: bold } /* Literal.Number.Oct */\n",
  ".syntax .sb { color: #dd2200; background-color: #fff0f0 } /* Literal.String.Backtick */\n",
  ".syntax .sc { color: #dd2200; background-color: #fff0f0 } /* Literal.String.Char */\n",
  ".syntax .sd { color: #dd2200; background-color: #fff0f0 } /* Literal.String.Doc */\n",
  ".syntax .s2 { color: #dd2200; background-color: #fff0f0 } /* Literal.String.Double */\n",
  ".syntax .se { color: #0044dd; background-color: #fff0f0 } /* Literal.String.Escape */\n",
  ".syntax .sh { color: #dd2200; background-color: #fff0f0 } /* Literal.String.Heredoc */\n",
  ".syntax .si { color: #3333bb; background-color: #fff0f0 } /* Literal.String.Interpol */\n",
  ".syntax .sx { color: #22bb22; background-color: #f0fff0 } /* Literal.String.Other */\n",
  ".syntax .sr { color: #008800; background-color: #fff0ff } /* Literal.String.Regex */\n",
  ".syntax .s1 { color: #dd2200; background-color: #fff0f0 } /* Literal.String.Single */\n",
  ".syntax .ss { color: #aa6600; background-color: #fff0f0 } /* Literal.String.Symbol */\n",
  ".syntax .bp { color: #003388 } /* Name.Builtin.Pseudo */\n",
  ".syntax .vc { color: #336699 } /* Name.Variable.Class */\n",
  ".syntax .vg { color: #dd7700 } /* Name.Variable.Global */\n",
  ".syntax .vi { color: #3333bb } /* Name.Variable.Instance */\n",
  ".syntax .il { color: #0000DD; font-weight: bold } /* Literal.Number.Integer.Long */\n",
  "   \n",
  "</head>\n",
  " \n",
  "   \n",
  "    <h1 class=\"heading\">Pygments</h1>\n",
  "    <h2 class=\"subheading\">Builtin Tokens</h2>\n",
  "    \n",
  "       &laquo; Back To Index</a>\n",
  "    \n",
  "    \n",
  "       \n",
  "        <h2>Contents</h2>\n",
  "         \n",
  "        \n",
  "            Keyword Tokens</a> \n",
  "        \n",
  "            Name Tokens</a> \n",
  "        \n",
  "            Literals</a> \n",
  "        \n",
  "            Operators</a> \n",
  "        \n",
  "            Punctuation</a> \n",
  "        \n",
  "            Comments</a> \n",
  "        \n",
  "            Generic Tokens</a> \n",
  "        \n",
  "         \n",
  "       \n",
  "    \n",
  "    <!-- -*- mode: rst -*- -->\n",
  "<p>Inside the  pygments.token  module, there is a special object called  Token \n",
  "that is used to create token types.</p>\n",
  "<p>You can create a new token type by accessing an attribute of  Token :</p>\n",
  "   &gt;&gt;&gt;   from   pygments.token   import   Token \n",
  " &gt;&gt;&gt;   Token  .  String \n",
  " Token.String \n",
  " &gt;&gt;&gt;   Token  .  String   is   Token  .  String \n",
  " True \n",
  "  \n",
  "<p>Note that tokens are singletons so you can use the   is   operator for comparing\n",
  "token types.</p>\n",
  "<p>As of Pygments 0.7 you can also use the   in   operator to perform set tests:</p>\n",
  "   &gt;&gt;&gt;   from   pygments.token   import   Comment \n",
  " &gt;&gt;&gt;   Comment  .  Single   in   Comment \n",
  " True \n",
  " &gt;&gt;&gt;   Comment   in   Comment  .  Multi \n",
  " False \n",
  "  \n",
  "<p>This can be useful in  filters</a> and if you write lexers on your own without\n",
  "using the base lexers.</p>\n",
  "<p>You can also split a token type into a hierarchy, and get the parent of it:</p>\n",
  "   &gt;&gt;&gt;   String  .  split  () \n",
  " [Token, Token.Literal, Token.Literal.String] \n",
  " &gt;&gt;&gt;   String  .  parent \n",
  " Token.Literal \n",
  "  \n",
  "<p>In principle, you can create an unlimited number of token types but nobody can\n",
  "guarantee that a style would define style rules for a token type. Because of\n",
  "that, Pygments proposes some global token types defined in the\n",
  " pygments.token.STANDARD_TYPES  dict.</p>\n",
  "<p>For some tokens aliases are already defined:</p>\n",
  "   &gt;&gt;&gt;   from   pygments.token   import   String \n",
  " &gt;&gt;&gt;   String \n",
  " Token.Literal.String \n",
  "  \n",
  "<p>Inside the  pygments.token  module the following aliases are defined:</p>\n",
  " \n",
  " \n",
  " \n",
  " \n",
  " \n",
  " \n",
  " \n",
  "   Text  \n",
  "  Token.Text  \n",
  " for any type of text data \n",
  " \n",
  "   Whitespace  \n",
  "  Token.Text.Whitespace  \n",
  " for specially highlighted whitespace \n",
  " \n",
  "   Error  \n",
  "  Token.Error  \n",
  " represents lexer errors \n",
  " \n",
  "   Other  \n",
  "  Token.Other  \n",
  " special token for data not\n",
  "matched by a parser (e.g. HTML\n",
  "markup in PHP code) \n",
  " \n",
  "   Keyword  \n",
  "  Token.Keyword  \n",
  " any kind of keywords \n",
  " \n",
  "   Name  \n",
  "  Token.Name  \n",
  " variable/function names \n",
  " \n",
  "   Literal  \n",
  "  Token.Literal  \n",
  " Any literals \n",
  " \n",
  "   String  \n",
  "  Token.Literal.String  \n",
  " string literals \n",
  " \n",
  "   Number  \n",
  "  Token.Literal.Number  \n",
  " number literals \n",
  " \n",
  "   Operator  \n",
  "  Token.Operator  \n",
  " operators (  +  ,   not  ...) \n",
  " \n",
  "   Punctuation  \n",
  "  Token.Punctuation  \n",
  " punctuation (  [  ,   (  ...) \n",
  " \n",
  "   Comment  \n",
  "  Token.Comment  \n",
  " any kind of comments \n",
  " \n",
  "   Generic  \n",
  "  Token.Generic  \n",
  " generic tokens (have a look at\n",
  "the explanation below) \n",
  " \n",
  " \n",
  " \n",
  "<p>The  Whitespace  token type is new in Pygments 0.8. It is used only by the\n",
  " VisibleWhitespaceFilter  currently.</p>\n",
  "<p>Normally you just create token types using the already defined aliases. For each\n",
  "of those token aliases, a number of subtypes exists (excluding the special tokens\n",
  " Token.Text ,  Token.Error  and  Token.Other )</p>\n",
  "<p>The  is_token_subtype()  function in the  pygments.token  module can be used to\n",
  "test if a token type is a subtype of another (such as  Name.Tag  and  Name ).\n",
  "(This is the same as   Name.Tag   in   Name  . The overloaded  in  operator was newly\n",
  "introduced in Pygments 0.7, the function still exists for backwards\n",
  "compatiblity.)</p>\n",
  "<p>With Pygments 0.7, it's also possible to convert strings to token types (for example\n",
  "if you want to supply a token from the command line):</p>\n",
  "   &gt;&gt;&gt;   from   pygments.token   import   String  ,   string_to_tokentype \n",
  " &gt;&gt;&gt;   string_to_tokentype  (  &quot;String&quot;  ) \n",
  " Token.Literal.String \n",
  " &gt;&gt;&gt;   string_to_tokentype  (  &quot;Token.Literal.String&quot;  ) \n",
  " Token.Literal.String \n",
  " &gt;&gt;&gt;   string_to_tokentype  (  String  ) \n",
  " Token.Literal.String \n",
  "  \n",
  " \n",
  "<h3> Keyword Tokens</a></h3>\n",
  " \n",
  "  Keyword  \n",
  " For any kind of keyword (especially if it doesn't match any of the\n",
  "subtypes of course). \n",
  "  Keyword.Constant  \n",
  " For keywords that are constants (e.g.   None   in future Python versions). \n",
  "  Keyword.Declaration  \n",
  " For keywords used for variable declaration (e.g.   var   in some programming\n",
  "languages like JavaScript). \n",
  "  Keyword.Pseudo  \n",
  " For keywords that aren't really keywords (e.g.   None   in old Python\n",
  "versions). \n",
  "  Keyword.Reserved  \n",
  " For reserved keywords. \n",
  "  Keyword.Type  \n",
  " For builtin types that can't be used as identifiers (e.g.   int  ,\n",
  "  char   etc. in C). \n",
  " \n",
  " \n",
  " \n",
  "<h3> Name Tokens</a></h3>\n",
  " \n",
  "  Name  \n",
  " For any name (variable names, function names, classes). \n",
  "  Name.Attribute  \n",
  " For all attributes (e.g. in HTML tags). \n",
  "  Name.Builtin  \n",
  " Builtin names; names that are available in the global namespace. \n",
  "  Name.Builtin.Pseudo  \n",
  " Builtin names that are implicit (e.g.   self   in Ruby,   this   in Java). \n",
  "  Name.Class  \n",
  " Class names. Because no lexer can know if a name is a class or a function\n",
  "or something else this token is meant for class declarations. \n",
  "  Name.Constant  \n",
  " Token type for constants. In some languages you can recognise a token by the\n",
  "way it's defined (the value after a   const   keyword for example). In\n",
  "other languages constants are uppercase by definition (Ruby). \n",
  "  Name.Decorator  \n",
  " Token type for decorators. Decorators are synatic elements in the Python\n",
  "language. Similar syntax elements exist in C# and Java. \n",
  "  Name.Entity  \n",
  " Token type for special entities. (e.g.   &amp;nbsp;   in HTML). \n",
  "  Name.Exception  \n",
  " Token type for exception names (e.g.   RuntimeError   in Python). Some languages\n",
  "define exceptions in the function signature (Java). You can highlight\n",
  "the name of that exception using this token then. \n",
  "  Name.Function  \n",
  " Token type for function names. \n",
  "  Name.Label  \n",
  " Token type for label names (e.g. in languages that support   goto  ). \n",
  "  Name.Namespace  \n",
  " Token type for namespaces. (e.g. import paths in Java/Python), names following\n",
  "the   module  /  namespace   keyword in other languages. \n",
  "  Name.Other  \n",
  " Other names. Normally unused. \n",
  "  Name.Tag  \n",
  " Tag names (in HTML/XML markup or configuration files). \n",
  "  Name.Variable  \n",
  " Token type for variables. Some languages have prefixes for variable names\n",
  "(PHP, Ruby, Perl). You can highlight them using this token. \n",
  "  Name.Variable.Class  \n",
  " same as  Name.Variable  but for class variables (also static variables). \n",
  "  Name.Variable.Global  \n",
  " same as  Name.Variable  but for global variables (used in Ruby, for\n",
  "example). \n",
  "  Name.Variable.Instance  \n",
  " same as  Name.Variable  but for instance variables. \n",
  " \n",
  " \n",
  " \n",
  "<h3> Literals</a></h3>\n",
  " \n",
  "  Literal  \n",
  " For any literal (if not further defined). \n",
  "  Literal.Date  \n",
  " for date literals (e.g.   42d   in Boo). \n",
  "  String  \n",
  " For any string literal. \n",
  "  String.Backtick  \n",
  " Token type for strings enclosed in backticks. \n",
  "  String.Char  \n",
  " Token type for single characters (e.g. Java, C). \n",
  "  String.Doc  \n",
  " Token type for documentation strings (for example Python). \n",
  "  String.Double  \n",
  " Double quoted strings. \n",
  "  String.Escape  \n",
  " Token type for escape sequences in strings. \n",
  "  String.Heredoc  \n",
  " Token type for &quot;heredoc&quot; strings (e.g. in Ruby or Perl). \n",
  "  String.Interpol  \n",
  " Token type for interpolated parts in strings (e.g.   #{foo}   in Ruby). \n",
  "  String.Other  \n",
  " Token type for any other strings (for example   %q{foo}   string constructs\n",
  "in Ruby). \n",
  "  String.Regex  \n",
  " Token type for regular expression literals (e.g.   /foo/   in JavaScript). \n",
  "  String.Single  \n",
  " Token type for single quoted strings. \n",
  "  String.Symbol  \n",
  " Token type for symbols (e.g.   :foo   in LISP or Ruby). \n",
  "  Number  \n",
  " Token type for any number literal. \n",
  "  Number.Float  \n",
  " Token type for float literals (e.g.   42.0  ). \n",
  "  Number.Hex  \n",
  " Token type for hexadecimal number literals (e.g.   0xdeadbeef  ). \n",
  "  Number.Integer  \n",
  " Token type for integer literals (e.g.   42  ). \n",
  "  Number.Integer.Long  \n",
  " Token type for long integer literals (e.g.   42L   in Python). \n",
  "  Number.Oct  \n",
  " Token type for octal literals. \n",
  " \n",
  " \n",
  " \n",
  "<h3> Operators</a></h3>\n",
  " \n",
  "  Operator  \n",
  " For any punctuation operator (e.g.   +  ,   -  ). \n",
  "  Operator.Word  \n",
  " For any operator that is a word (e.g.   not  ). \n",
  " \n",
  " \n",
  " \n",
  "<h3> Punctuation</a></h3>\n",
  "<p> New in Pygments 0.7. </p>\n",
  " \n",
  "  Punctuation  \n",
  " For any punctuation which is not an operator (e.g.   [  ,   (  ...) \n",
  " \n",
  " \n",
  " \n",
  "<h3> Comments</a></h3>\n",
  " \n",
  "  Comment  \n",
  " Token type for any comment. \n",
  "  Comment.Multiline  \n",
  " Token type for multiline comments. \n",
  "  Comment.Preproc  \n",
  " Token type for preprocessor comments (also   &lt;?php  /  &lt;%   constructs). \n",
  "  Comment.Single  \n",
  " Token type for comments that end at the end of a line (e.g.   #   foo  ). \n",
  "  Comment.Special  \n",
  " Special data in comments. For example code tags, author and license\n",
  "informations etc. \n",
  " \n",
  " \n",
  " \n",
  "<h3> Generic Tokens</a></h3>\n",
  "<p>Generic tokens are for special lexers like the  DiffLexer  that doesn't really\n",
  "highlight a programming language but a patch file.</p>\n",
  " \n",
  "  Generic  \n",
  " A generic, unstyled token. Normally you don't use this token type. \n",
  "  Generic.Deleted  \n",
  " Marks the token value as deleted. \n",
  "  Generic.Emph  \n",
  " Marks the token value as emphasized. \n",
  "  Generic.Error  \n",
  " Marks the token value as an error message. \n",
  "  Generic.Heading  \n",
  " Marks the token value as headline. \n",
  "  Generic.Inserted  \n",
  " Marks the token value as inserted. \n",
  "  Generic.Output  \n",
  " Marks the token value as program output (e.g. for python cli lexer). \n",
  "  Generic.Prompt  \n",
  " Marks the token value as command prompt (e.g. bash lexer). \n",
  "  Generic.Strong  \n",
  " Marks the token value as bold (e.g. for rst lexer). \n",
  "  Generic.Subheading  \n",
  " Marks the token value as subheadline. \n",
  "  Generic.Traceback  \n",
  " Marks the token value as a part of an error traceback. \n",
  " \n",
  " \n",
  "\n",
  "   \n",
  " \n",
  "<!-- generated on: 2008-05-06 18:28:11.468462\n",
  "     file id: tokens -->\n",
  "</html>\n"
]