[
  "  style=\"color: #000000\">\n",
  " style=\"color: #0000BB\"> ?php    style=\"color: #FF8000\">/* vim: set expandtab tabstop=4 shiftwidth=4 softtabstop=4: */    /**   * Converts to and from JSON format.   *   * JSON (JavaScript Object Notation) is a lightweight data-interchange   * format. It is easy for humans to read and write. It is easy for machines   * to parse and generate. It is based on a subset of the JavaScript   * Programming Language, Standard ECMA-262 3rd Edition - December 1999.   * This feature can also be found in  Python. JSON is a text format that is   * completely language independent but uses conventions that are familiar   * to programmers of the C-family of languages, including C, C++, C#, Java,   * JavaScript, Perl, TCL, and many others. These properties make JSON an   * ideal data-interchange language.   *   * This package provides a simple encoder and decoder for JSON notation. It   * is intended for use with client-side Javascript applications that make   * use of HTTPRequest to perform server communication functions - data can   * be encoded into JSON notation for use in a client-side javascript, or   * decoded from incoming Javascript requests. JSON format is native to   * Javascript, and can be directly eval()'ed with no further parsing   * overhead   *   * All strings should be in ASCII or UTF-8 format!   *   * LICENSE: Redistribution and use in source and binary forms, with or   * without modification, are permitted provided that the following   * conditions are met: Redistributions of source code must retain the   * above copyright notice, this list of conditions and the following   * disclaimer. Redistributions in binary form must reproduce the above   * copyright notice, this list of conditions and the following disclaimer   * in the documentation and/or other materials provided with the   * distribution.   *   * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESS OR IMPLIED   * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF   * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN   * NO EVENT SHALL CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,   * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,   * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR  LOSS   * OF USE, DATA, OR  OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND   * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR   * TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE   * USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH   * DAMAGE.   *   * @category   * @package     Services_JSON   * @author      Michal Migurski  mike-json@teczno.com    * @author      Matt Knapp  mdknapp[at]gmail[dot]com    * @author      Brett Stimmerman  brettstimmerman[at]gmail[dot]com    * @copyright   2005 Michal Migurski   * @version     CVS: $Id: JSON.php,v 1.31 2006/06/28 05:54:17 migurski Exp $   * @license     http://www.opensource.org/licenses/bsd-license.php   * @link        http://pear.php.net/pepr/pepr-proposal-show.php?id=198   */    /**   * Marker constant for Services_JSON::decode(), used to flag stack state   */    style=\"color: #0000BB\">define  style=\"color: #007700\">(  style=\"color: #DD0000\">'SERVICES_JSON_SLICE'  style=\"color: #007700\">,     style=\"color: #0000BB\">1  style=\"color: #007700\">);      style=\"color: #FF8000\">/**   * Marker constant for Services_JSON::decode(), used to flag stack state   */    style=\"color: #0000BB\">define  style=\"color: #007700\">(  style=\"color: #DD0000\">'SERVICES_JSON_IN_STR'  style=\"color: #007700\">,    style=\"color: #0000BB\">2  style=\"color: #007700\">);      style=\"color: #FF8000\">/**   * Marker constant for Services_JSON::decode(), used to flag stack state   */    style=\"color: #0000BB\">define  style=\"color: #007700\">(  style=\"color: #DD0000\">'SERVICES_JSON_IN_ARR'  style=\"color: #007700\">,    style=\"color: #0000BB\">3  style=\"color: #007700\">);      style=\"color: #FF8000\">/**   * Marker constant for Services_JSON::decode(), used to flag stack state   */    style=\"color: #0000BB\">define  style=\"color: #007700\">(  style=\"color: #DD0000\">'SERVICES_JSON_IN_OBJ'  style=\"color: #007700\">,    style=\"color: #0000BB\">4  style=\"color: #007700\">);      style=\"color: #FF8000\">/**   * Marker constant for Services_JSON::decode(), used to flag stack state   */    style=\"color: #0000BB\">define  style=\"color: #007700\">(  style=\"color: #DD0000\">'SERVICES_JSON_IN_CMT'  style=\"color: #007700\">,   style=\"color: #0000BB\">5  style=\"color: #007700\">);      style=\"color: #FF8000\">/**   * Behavior switch for Services_JSON::decode()   */    style=\"color: #0000BB\">define  style=\"color: #007700\">(  style=\"color: #DD0000\">'SERVICES_JSON_LOOSE_TYPE'  style=\"color: #007700\">,   style=\"color: #0000BB\">16  style=\"color: #007700\">);      style=\"color: #FF8000\">/**   * Behavior switch for Services_JSON::decode()   */    style=\"color: #0000BB\">define  style=\"color: #007700\">(  style=\"color: #DD0000\">'SERVICES_JSON_SUPPRESS_ERRORS'  style=\"color: #007700\">,   style=\"color: #0000BB\">32  style=\"color: #007700\">);      style=\"color: #FF8000\">/**   * Converts to and from JSON format.   *   * Brief example of use:   *   *  code    * // create a new instance of Services_JSON   * $json = new    *   * // convert a complexe value to JSON notation, and send it to the browser   * $value = array('foo', 'bar', array(1, 2, 'baz'), array(3,    * $output = $json-    *   *    * // prints: [\"foo\",\"bar\",[1,2,\"baz\"],[3,[4]]]   *   * // accept incoming POST data, assumed to be in JSON notation   * $input = file_get_contents('php://input',    * $value = $json-    *  /code    */    style=\"color: #007700\">class   style=\"color: #0000BB\">Services_JSON    style=\"color: #007700\">{       style=\"color: #FF8000\">/**      * constructs a new JSON instance      *      * @param    int     $use    object behavior  combine with boolean-OR      *      *                           possible values:      *                           - SERVICES_JSON_LOOSE_TYPE:  loose typing.      *                                   \"{...}\" syntax creates associative arrays      *                                   instead of objects in decode().      *                           - SERVICES_JSON_SUPPRESS_ERRORS:  error suppression.      *                                   Values which can't be encoded (e.g. resources)      *                                   appear as NULL instead of throwing errors.      *                                   By default, a deeply-nested resource will      *                                   bubble up with an error, so all return values      *                                   from encode() should be checked with isError()      */        style=\"color: #007700\">function   style=\"color: #0000BB\">Services_JSON  style=\"color: #007700\">(  style=\"color: #0000BB\">$use   style=\"color: #007700\">=   style=\"color: #0000BB\">0  style=\"color: #007700\">)      {            style=\"color: #0000BB\">$this  style=\"color: #007700\">-   style=\"color: #0000BB\">use   style=\"color: #007700\">=   style=\"color: #0000BB\">$use  style=\"color: #007700\">;      }         style=\"color: #FF8000\">/**      * convert a string from one UTF-16 char to one UTF-8 char      *      * Normally should be handled by mb_convert_encoding, but      * provides a slower PHP-only method for installations      * that lack the multibye string extension.      *      * @param    string  $utf16  UTF-16 character      * @return   string  UTF-8 character      * @access   private      */        style=\"color: #007700\">function   style=\"color: #0000BB\">utf162utf8  style=\"color: #007700\">(  style=\"color: #0000BB\">$utf16  style=\"color: #007700\">)      {            style=\"color: #FF8000\">// oh please oh please oh please oh please oh please            style=\"color: #007700\">if(  style=\"color: #0000BB\">function_exists  style=\"color: #007700\">(  style=\"color: #DD0000\">'mb_convert_encoding'  style=\"color: #007700\">)) {              return   style=\"color: #0000BB\">mb_convert_encoding  style=\"color: #007700\">(  style=\"color: #0000BB\">$utf16  style=\"color: #007700\">,   style=\"color: #DD0000\">'UTF-8'  style=\"color: #007700\">,   style=\"color: #DD0000\">'UTF-16'  style=\"color: #007700\">);          }              style=\"color: #0000BB\">$bytes   style=\"color: #007700\">= (  style=\"color: #0000BB\">ord  style=\"color: #007700\">(  style=\"color: #0000BB\">$utf16  style=\"color: #007700\">{  style=\"color: #0000BB\">0  style=\"color: #007700\">})      style=\"color: #0000BB\">8  style=\"color: #007700\">) |   style=\"color: #0000BB\">ord  style=\"color: #007700\">(  style=\"color: #0000BB\">$utf16  style=\"color: #007700\">{  style=\"color: #0000BB\">1  style=\"color: #007700\">});            switch(  style=\"color: #0000BB\">true  style=\"color: #007700\">) {              case ((  style=\"color: #0000BB\">0x7F   style=\"color: #007700\">    style=\"color: #0000BB\">$bytes  style=\"color: #007700\">) ==   style=\"color: #0000BB\">$bytes  style=\"color: #007700\">):                    style=\"color: #FF8000\">// this case should never be reached, because we are in ASCII range                  // see: http://www.cl.cam.ac.uk/~mgk25/unicode.html#utf-8                    style=\"color: #007700\">return   style=\"color: #0000BB\">chr  style=\"color: #007700\">(  style=\"color: #0000BB\">0x7F   style=\"color: #007700\">    style=\"color: #0000BB\">$bytes  style=\"color: #007700\">);                case (  style=\"color: #0000BB\">0x07FF   style=\"color: #007700\">    style=\"color: #0000BB\">$bytes  style=\"color: #007700\">) ==   style=\"color: #0000BB\">$bytes  style=\"color: #007700\">:                    style=\"color: #FF8000\">// return a 2-byte UTF-8 character                  // see: http://www.cl.cam.ac.uk/~mgk25/unicode.html#utf-8                    style=\"color: #007700\">return   style=\"color: #0000BB\">chr  style=\"color: #007700\">(  style=\"color: #0000BB\">0xC0   style=\"color: #007700\">| ((  style=\"color: #0000BB\">$bytes   style=\"color: #007700\">     style=\"color: #0000BB\">6  style=\"color: #007700\">)     style=\"color: #0000BB\">0x1F  style=\"color: #007700\">))                       .   style=\"color: #0000BB\">chr  style=\"color: #007700\">(  style=\"color: #0000BB\">0x80   style=\"color: #007700\">| (  style=\"color: #0000BB\">$bytes   style=\"color: #007700\">    style=\"color: #0000BB\">0x3F  style=\"color: #007700\">));                case (  style=\"color: #0000BB\">0xFFFF   style=\"color: #007700\">    style=\"color: #0000BB\">$bytes  style=\"color: #007700\">) ==   style=\"color: #0000BB\">$bytes  style=\"color: #007700\">:                    style=\"color: #FF8000\">// return a 3-byte UTF-8 character                  // see: http://www.cl.cam.ac.uk/~mgk25/unicode.html#utf-8                    style=\"color: #007700\">return   style=\"color: #0000BB\">chr  style=\"color: #007700\">(  style=\"color: #0000BB\">0xE0   style=\"color: #007700\">| ((  style=\"color: #0000BB\">$bytes   style=\"color: #007700\">     style=\"color: #0000BB\">12  style=\"color: #007700\">)     style=\"color: #0000BB\">0x0F  style=\"color: #007700\">))                       .   style=\"color: #0000BB\">chr  style=\"color: #007700\">(  style=\"color: #0000BB\">0x80   style=\"color: #007700\">| ((  style=\"color: #0000BB\">$bytes   style=\"color: #007700\">     style=\"color: #0000BB\">6  style=\"color: #007700\">)     style=\"color: #0000BB\">0x3F  style=\"color: #007700\">))                       .   style=\"color: #0000BB\">chr  style=\"color: #007700\">(  style=\"color: #0000BB\">0x80   style=\"color: #007700\">| (  style=\"color: #0000BB\">$bytes   style=\"color: #007700\">    style=\"color: #0000BB\">0x3F  style=\"color: #007700\">));          }              style=\"color: #FF8000\">// ignoring UTF-32 for now, sorry            style=\"color: #007700\">return   style=\"color: #DD0000\">''  style=\"color: #007700\">;      }         style=\"color: #FF8000\">/**      * convert a string from one UTF-8 char to one UTF-16 char      *      * Normally should be handled by mb_convert_encoding, but      * provides a slower PHP-only method for installations      * that lack the multibye string extension.      *      * @param    string  $utf8   UTF-8 character      * @return   string  UTF-16 character      * @access   private      */        style=\"color: #007700\">function   style=\"color: #0000BB\">utf82utf16  style=\"color: #007700\">(  style=\"color: #0000BB\">$utf8  style=\"color: #007700\">)      {            style=\"color: #FF8000\">// oh please oh please oh please oh please oh please            style=\"color: #007700\">if(  style=\"color: #0000BB\">function_exists  style=\"color: #007700\">(  style=\"color: #DD0000\">'mb_convert_encoding'  style=\"color: #007700\">)) {              return   style=\"color: #0000BB\">mb_convert_encoding  style=\"color: #007700\">(  style=\"color: #0000BB\">$utf8  style=\"color: #007700\">,   style=\"color: #DD0000\">'UTF-16'  style=\"color: #007700\">,   style=\"color: #DD0000\">'UTF-8'  style=\"color: #007700\">);          }            switch(  style=\"color: #0000BB\">strlen  style=\"color: #007700\">(  style=\"color: #0000BB\">$utf8  style=\"color: #007700\">)) {              case   style=\"color: #0000BB\">1  style=\"color: #007700\">:                    style=\"color: #FF8000\">// this case should never be reached, because we are in ASCII range                  // see: http://www.cl.cam.ac.uk/~mgk25/unicode.html#utf-8                    style=\"color: #007700\">return   style=\"color: #0000BB\">$utf8  style=\"color: #007700\">;                case   style=\"color: #0000BB\">2  style=\"color: #007700\">:                    style=\"color: #FF8000\">// return a UTF-16 character from a 2-byte UTF-8 char                  // see: http://www.cl.cam.ac.uk/~mgk25/unicode.html#utf-8                    style=\"color: #007700\">return   style=\"color: #0000BB\">chr  style=\"color: #007700\">(  style=\"color: #0000BB\">0x07   style=\"color: #007700\">  (  style=\"color: #0000BB\">ord  style=\"color: #007700\">(  style=\"color: #0000BB\">$utf8  style=\"color: #007700\">{  style=\"color: #0000BB\">0  style=\"color: #007700\">})      style=\"color: #0000BB\">2  style=\"color: #007700\">))                       .   style=\"color: #0000BB\">chr  style=\"color: #007700\">((  style=\"color: #0000BB\">0xC0   style=\"color: #007700\">  (  style=\"color: #0000BB\">ord  style=\"color: #007700\">(  style=\"color: #0000BB\">$utf8  style=\"color: #007700\">{  style=\"color: #0000BB\">0  style=\"color: #007700\">})      style=\"color: #0000BB\">6  style=\"color: #007700\">))                           | (  style=\"color: #0000BB\">0x3F   style=\"color: #007700\">    style=\"color: #0000BB\">ord  style=\"color: #007700\">(  style=\"color: #0000BB\">$utf8  style=\"color: #007700\">{  style=\"color: #0000BB\">1  style=\"color: #007700\">})));                case   style=\"color: #0000BB\">3  style=\"color: #007700\">:                    style=\"color: #FF8000\">// return a UTF-16 character from a 3-byte UTF-8 char                  // see: http://www.cl.cam.ac.uk/~mgk25/unicode.html#utf-8                    style=\"color: #007700\">return   style=\"color: #0000BB\">chr  style=\"color: #007700\">((  style=\"color: #0000BB\">0xF0   style=\"color: #007700\">  (  style=\"color: #0000BB\">ord  style=\"color: #007700\">(  style=\"color: #0000BB\">$utf8  style=\"color: #007700\">{  style=\"color: #0000BB\">0  style=\"color: #007700\">})      style=\"color: #0000BB\">4  style=\"color: #007700\">))                           | (  style=\"color: #0000BB\">0x0F   style=\"color: #007700\">  (  style=\"color: #0000BB\">ord  style=\"color: #007700\">(  style=\"color: #0000BB\">$utf8  style=\"color: #007700\">{  style=\"color: #0000BB\">1  style=\"color: #007700\">})      style=\"color: #0000BB\">2  style=\"color: #007700\">)))                       .   style=\"color: #0000BB\">chr  style=\"color: #007700\">((  style=\"color: #0000BB\">0xC0   style=\"color: #007700\">  (  style=\"color: #0000BB\">ord  style=\"color: #007700\">(  style=\"color: #0000BB\">$utf8  style=\"color: #007700\">{  style=\"color: #0000BB\">1  style=\"color: #007700\">})      style=\"color: #0000BB\">6  style=\"color: #007700\">))                           | (  style=\"color: #0000BB\">0x7F   style=\"color: #007700\">    style=\"color: #0000BB\">ord  style=\"color: #007700\">(  style=\"color: #0000BB\">$utf8  style=\"color: #007700\">{  style=\"color: #0000BB\">2  style=\"color: #007700\">})));          }              style=\"color: #FF8000\">// ignoring UTF-32 for now, sorry            style=\"color: #007700\">return   style=\"color: #DD0000\">''  style=\"color: #007700\">;      }         style=\"color: #FF8000\">/**      * encodes an arbitrary variable into JSON format      *      * @param    mixed   $var    any number, boolean, string, array, or object to be encoded.      *                           see argument 1 to Services_JSON() above for array-parsing behavior.      *                           if var is a strng, note that encode() always expects it      *                           to be in ASCII or UTF-8 format!      *      * @return   mixed   JSON string representation of input var or an error if a problem occurs      * @access   public      */        style=\"color: #007700\">function   style=\"color: #0000BB\">encode  style=\"color: #007700\">(  style=\"color: #0000BB\">$var  style=\"color: #007700\">)      {          switch (  style=\"color: #0000BB\">gettype  style=\"color: #007700\">(  style=\"color: #0000BB\">$var  style=\"color: #007700\">)) {              case   style=\"color: #DD0000\">'boolean'  style=\"color: #007700\">:                  return   style=\"color: #0000BB\">$var   style=\"color: #007700\">?   style=\"color: #DD0000\">'true'   style=\"color: #007700\">:   style=\"color: #DD0000\">'false'  style=\"color: #007700\">;                case   style=\"color: #DD0000\">'NULL'  style=\"color: #007700\">:                  return   style=\"color: #DD0000\">'null'  style=\"color: #007700\">;                case   style=\"color: #DD0000\">'integer'  style=\"color: #007700\">:                  return (int)   style=\"color: #0000BB\">$var  style=\"color: #007700\">;                case   style=\"color: #DD0000\">'double'  style=\"color: #007700\">:              case   style=\"color: #DD0000\">'float'  style=\"color: #007700\">:                  return (float)   style=\"color: #0000BB\">$var  style=\"color: #007700\">;                case   style=\"color: #DD0000\">'string'  style=\"color: #007700\">:                    style=\"color: #FF8000\">// STRINGS ARE EXPECTED TO BE IN ASCII OR UTF-8 FORMAT                    style=\"color: #0000BB\">$ascii   style=\"color: #007700\">=   style=\"color: #DD0000\">''  style=\"color: #007700\">;                    style=\"color: #0000BB\">$strlen_var   style=\"color: #007700\">=   style=\"color: #0000BB\">strlen  style=\"color: #007700\">(  style=\"color: #0000BB\">$var  style=\"color: #007700\">);                     style=\"color: #FF8000\">/*                  * Iterate over every character in the string,                  * escaping with a slash or encoding to UTF-8 where necessary                  */                    style=\"color: #007700\">for (  style=\"color: #0000BB\">$c   style=\"color: #007700\">=   style=\"color: #0000BB\">0  style=\"color: #007700\">;   style=\"color: #0000BB\">$c   style=\"color: #007700\">    style=\"color: #0000BB\">$strlen_var  style=\"color: #007700\">; ++  style=\"color: #0000BB\">$c  style=\"color: #007700\">) {                          style=\"color: #0000BB\">$ord_var_c   style=\"color: #007700\">=   style=\"color: #0000BB\">ord  style=\"color: #007700\">(  style=\"color: #0000BB\">$var  style=\"color: #007700\">{  style=\"color: #0000BB\">$c  style=\"color: #007700\">});                        switch (  style=\"color: #0000BB\">true  style=\"color: #007700\">) {                          case   style=\"color: #0000BB\">$ord_var_c   style=\"color: #007700\">==   style=\"color: #0000BB\">0x08  style=\"color: #007700\">:                                style=\"color: #0000BB\">$ascii   style=\"color: #007700\">.=   style=\"color: #DD0000\">'\\b'  style=\"color: #007700\">;                                                        case   style=\"color: #0000BB\">$ord_var_c   style=\"color: #007700\">==   style=\"color: #0000BB\">0x09  style=\"color: #007700\">:                                style=\"color: #0000BB\">$ascii   style=\"color: #007700\">.=   style=\"color: #DD0000\">' '  style=\"color: #007700\">;                                                        case   style=\"color: #0000BB\">$ord_var_c   style=\"color: #007700\">==   style=\"color: #0000BB\">0x0A  style=\"color: #007700\">:                                style=\"color: #0000BB\">$ascii   style=\"color: #007700\">.=   style=\"color: #DD0000\">' '  style=\"color: #007700\">;                                                        case   style=\"color: #0000BB\">$ord_var_c   style=\"color: #007700\">==   style=\"color: #0000BB\">0x0C  style=\"color: #007700\">:                                style=\"color: #0000BB\">$ascii   style=\"color: #007700\">.=   style=\"color: #DD0000\">'\\f'  style=\"color: #007700\">;                                                        case   style=\"color: #0000BB\">$ord_var_c   style=\"color: #007700\">==   style=\"color: #0000BB\">0x0D  style=\"color: #007700\">:                                style=\"color: #0000BB\">$ascii   style=\"color: #007700\">.=   style=\"color: #DD0000\">' '  style=\"color: #007700\">;                                                          case   style=\"color: #0000BB\">$ord_var_c   style=\"color: #007700\">==   style=\"color: #0000BB\">0x22  style=\"color: #007700\">:                          case   style=\"color: #0000BB\">$ord_var_c   style=\"color: #007700\">==   style=\"color: #0000BB\">0x2F  style=\"color: #007700\">:                          case   style=\"color: #0000BB\">$ord_var_c   style=\"color: #007700\">==   style=\"color: #0000BB\">0x5C  style=\"color: #007700\">:                                style=\"color: #FF8000\">// double quote, slash, slosh                                style=\"color: #0000BB\">$ascii   style=\"color: #007700\">.=   style=\"color: #DD0000\">'\\\\'  style=\"color: #007700\">.  style=\"color: #0000BB\">$var  style=\"color: #007700\">{  style=\"color: #0000BB\">$c  style=\"color: #007700\">};                                                          case ((  style=\"color: #0000BB\">$ord_var_c   style=\"color: #007700\"> =   style=\"color: #0000BB\">0x20  style=\"color: #007700\">)    (  style=\"color: #0000BB\">$ord_var_c   style=\"color: #007700\"> =   style=\"color: #0000BB\">0x7F  style=\"color: #007700\">)):                                style=\"color: #FF8000\">// characters U-00000000 - U-0000007F (same as ASCII)                                style=\"color: #0000BB\">$ascii   style=\"color: #007700\">.=   style=\"color: #0000BB\">$var  style=\"color: #007700\">{  style=\"color: #0000BB\">$c  style=\"color: #007700\">};                                                          case ((  style=\"color: #0000BB\">$ord_var_c   style=\"color: #007700\">    style=\"color: #0000BB\">0xE0  style=\"color: #007700\">) ==   style=\"color: #0000BB\">0xC0  style=\"color: #007700\">):                                style=\"color: #FF8000\">// characters U-00000080 - U-000007FF, mask 110XXXXX                              // see http://www.cl.cam.ac.uk/~mgk25/unicode.html#utf-8                                style=\"color: #0000BB\">$char   style=\"color: #007700\">=   style=\"color: #0000BB\">pack  style=\"color: #007700\">(  style=\"color: #DD0000\">'C*'  style=\"color: #007700\">,   style=\"color: #0000BB\">$ord_var_c  style=\"color: #007700\">,   style=\"color: #0000BB\">ord  style=\"color: #007700\">(  style=\"color: #0000BB\">$var  style=\"color: #007700\">{  style=\"color: #0000BB\">$c   style=\"color: #007700\">+   style=\"color: #0000BB\">1  style=\"color: #007700\">}));                                style=\"color: #0000BB\">$c   style=\"color: #007700\">+=   style=\"color: #0000BB\">1  style=\"color: #007700\">;                                style=\"color: #0000BB\">$utf16   style=\"color: #007700\">=   style=\"color: #0000BB\">$this  style=\"color: #007700\">-   style=\"color: #0000BB\">utf82utf16  style=\"color: #007700\">(  style=\"color: #0000BB\">$char  style=\"color: #007700\">);                                style=\"color: #0000BB\">$ascii   style=\"color: #007700\">.=   style=\"color: #0000BB\">sprintf  style=\"color: #007700\">(  style=\"color: #DD0000\">'\\u%04s'  style=\"color: #007700\">,   style=\"color: #0000BB\">bin2hex  style=\"color: #007700\">(  style=\"color: #0000BB\">$utf16  style=\"color: #007700\">));                                                          case ((  style=\"color: #0000BB\">$ord_var_c   style=\"color: #007700\">    style=\"color: #0000BB\">0xF0  style=\"color: #007700\">) ==   style=\"color: #0000BB\">0xE0  style=\"color: #007700\">):                                style=\"color: #FF8000\">// characters U-00000800 - U-0000FFFF, mask 1110XXXX                              // see http://www.cl.cam.ac.uk/~mgk25/unicode.html#utf-8                                style=\"color: #0000BB\">$char   style=\"color: #007700\">=   style=\"color: #0000BB\">pack  style=\"color: #007700\">(  style=\"color: #DD0000\">'C*'  style=\"color: #007700\">,   style=\"color: #0000BB\">$ord_var_c  style=\"color: #007700\">,                                             style=\"color: #0000BB\">ord  style=\"color: #007700\">(  style=\"color: #0000BB\">$var  style=\"color: #007700\">{  style=\"color: #0000BB\">$c   style=\"color: #007700\">+   style=\"color: #0000BB\">1  style=\"color: #007700\">}),                                             style=\"color: #0000BB\">ord  style=\"color: #007700\">(  style=\"color: #0000BB\">$var  style=\"color: #007700\">{  style=\"color: #0000BB\">$c   style=\"color: #007700\">+   style=\"color: #0000BB\">2  style=\"color: #007700\">}));                                style=\"color: #0000BB\">$c   style=\"color: #007700\">+=   style=\"color: #0000BB\">2  style=\"color: #007700\">;                                style=\"color: #0000BB\">$utf16   style=\"color: #007700\">=   style=\"color: #0000BB\">$this  style=\"color: #007700\">-   style=\"color: #0000BB\">utf82utf16  style=\"color: #007700\">(  style=\"color: #0000BB\">$char  style=\"color: #007700\">);                                style=\"color: #0000BB\">$ascii   style=\"color: #007700\">.=   style=\"color: #0000BB\">sprintf  style=\"color: #007700\">(  style=\"color: #DD0000\">'\\u%04s'  style=\"color: #007700\">,   style=\"color: #0000BB\">bin2hex  style=\"color: #007700\">(  style=\"color: #0000BB\">$utf16  style=\"color: #007700\">));                                                          case ((  style=\"color: #0000BB\">$ord_var_c   style=\"color: #007700\">    style=\"color: #0000BB\">0xF8  style=\"color: #007700\">) ==   style=\"color: #0000BB\">0xF0  style=\"color: #007700\">):                                style=\"color: #FF8000\">// characters U-00010000 - U-001FFFFF, mask 11110XXX                              // see http://www.cl.cam.ac.uk/~mgk25/unicode.html#utf-8                                style=\"color: #0000BB\">$char   style=\"color: #007700\">=   style=\"color: #0000BB\">pack  style=\"color: #007700\">(  style=\"color: #DD0000\">'C*'  style=\"color: #007700\">,   style=\"color: #0000BB\">$ord_var_c  style=\"color: #007700\">,                                             style=\"color: #0000BB\">ord  style=\"color: #007700\">(  style=\"color: #0000BB\">$var  style=\"color: #007700\">{  style=\"color: #0000BB\">$c   style=\"color: #007700\">+   style=\"color: #0000BB\">1  style=\"color: #007700\">}),                                             style=\"color: #0000BB\">ord  style=\"color: #007700\">(  style=\"color: #0000BB\">$var  style=\"color: #007700\">{  style=\"color: #0000BB\">$c   style=\"color: #007700\">+   style=\"color: #0000BB\">2  style=\"color: #007700\">}),                                             style=\"color: #0000BB\">ord  style=\"color: #007700\">(  style=\"color: #0000BB\">$var  style=\"color: #007700\">{  style=\"color: #0000BB\">$c   style=\"color: #007700\">+   style=\"color: #0000BB\">3  style=\"color: #007700\">}));                                style=\"color: #0000BB\">$c   style=\"color: #007700\">+=   style=\"color: #0000BB\">3  style=\"color: #007700\">;                                style=\"color: #0000BB\">$utf16   style=\"color: #007700\">=   style=\"color: #0000BB\">$this  style=\"color: #007700\">-   style=\"color: #0000BB\">utf82utf16  style=\"color: #007700\">(  style=\"color: #0000BB\">$char  style=\"color: #007700\">);                                style=\"color: #0000BB\">$ascii   style=\"color: #007700\">.=   style=\"color: #0000BB\">sprintf  style=\"color: #007700\">(  style=\"color: #DD0000\">'\\u%04s'  style=\"color: #007700\">,   style=\"color: #0000BB\">bin2hex  style=\"color: #007700\">(  style=\"color: #0000BB\">$utf16  style=\"color: #007700\">));                                                          case ((  style=\"color: #0000BB\">$ord_var_c   style=\"color: #007700\">    style=\"color: #0000BB\">0xFC  style=\"color: #007700\">) ==   style=\"color: #0000BB\">0xF8  style=\"color: #007700\">):                                style=\"color: #FF8000\">// characters U-00200000 - U-03FFFFFF, mask 111110XX                              // see http://www.cl.cam.ac.uk/~mgk25/unicode.html#utf-8                                style=\"color: #0000BB\">$char   style=\"color: #007700\">=   style=\"color: #0000BB\">pack  style=\"color: #007700\">(  style=\"color: #DD0000\">'C*'  style=\"color: #007700\">,   style=\"color: #0000BB\">$ord_var_c  style=\"color: #007700\">,                                             style=\"color: #0000BB\">ord  style=\"color: #007700\">(  style=\"color: #0000BB\">$var  style=\"color: #007700\">{  style=\"color: #0000BB\">$c   style=\"color: #007700\">+   style=\"color: #0000BB\">1  style=\"color: #007700\">}),                                             style=\"color: #0000BB\">ord  style=\"color: #007700\">(  style=\"color: #0000BB\">$var  style=\"color: #007700\">{  style=\"color: #0000BB\">$c   style=\"color: #007700\">+   style=\"color: #0000BB\">2  style=\"color: #007700\">}),                                             style=\"color: #0000BB\">ord  style=\"color: #007700\">(  style=\"color: #0000BB\">$var  style=\"color: #007700\">{  style=\"color: #0000BB\">$c   style=\"color: #007700\">+   style=\"color: #0000BB\">3  style=\"color: #007700\">}),                                             style=\"color: #0000BB\">ord  style=\"color: #007700\">(  style=\"color: #0000BB\">$var  style=\"color: #007700\">{  style=\"color: #0000BB\">$c   style=\"color: #007700\">+   style=\"color: #0000BB\">4  style=\"color: #007700\">}));                                style=\"color: #0000BB\">$c   style=\"color: #007700\">+=   style=\"color: #0000BB\">4  style=\"color: #007700\">;                                style=\"color: #0000BB\">$utf16   style=\"color: #007700\">=   style=\"color: #0000BB\">$this  style=\"color: #007700\">-   style=\"color: #0000BB\">utf82utf16  style=\"color: #007700\">(  style=\"color: #0000BB\">$char  style=\"color: #007700\">);                                style=\"color: #0000BB\">$ascii   style=\"color: #007700\">.=   style=\"color: #0000BB\">sprintf  style=\"color: #007700\">(  style=\"color: #DD0000\">'\\u%04s'  style=\"color: #007700\">,   style=\"color: #0000BB\">bin2hex  style=\"color: #007700\">(  style=\"color: #0000BB\">$utf16  style=\"color: #007700\">));                                                          case ((  style=\"color: #0000BB\">$ord_var_c   style=\"color: #007700\">    style=\"color: #0000BB\">0xFE  style=\"color: #007700\">) ==   style=\"color: #0000BB\">0xFC  style=\"color: #007700\">):                                style=\"color: #FF8000\">// characters U-04000000 - U-7FFFFFFF, mask 1111110X                              // see http://www.cl.cam.ac.uk/~mgk25/unicode.html#utf-8                                style=\"color: #0000BB\">$char   style=\"color: #007700\">=   style=\"color: #0000BB\">pack  style=\"color: #007700\">(  style=\"color: #DD0000\">'C*'  style=\"color: #007700\">,   style=\"color: #0000BB\">$ord_var_c  style=\"color: #007700\">,                                             style=\"color: #0000BB\">ord  style=\"color: #007700\">(  style=\"color: #0000BB\">$var  style=\"color: #007700\">{  style=\"color: #0000BB\">$c   style=\"color: #007700\">+   style=\"color: #0000BB\">1  style=\"color: #007700\">}),                                             style=\"color: #0000BB\">ord  style=\"color: #007700\">(  style=\"color: #0000BB\">$var  style=\"color: #007700\">{  style=\"color: #0000BB\">$c   style=\"color: #007700\">+   style=\"color: #0000BB\">2  style=\"color: #007700\">}),                                             style=\"color: #0000BB\">ord  style=\"color: #007700\">(  style=\"color: #0000BB\">$var  style=\"color: #007700\">{  style=\"color: #0000BB\">$c   style=\"color: #007700\">+   style=\"color: #0000BB\">3  style=\"color: #007700\">}),                                             style=\"color: #0000BB\">ord  style=\"color: #007700\">(  style=\"color: #0000BB\">$var  style=\"color: #007700\">{  style=\"color: #0000BB\">$c   style=\"color: #007700\">+   style=\"color: #0000BB\">4  style=\"color: #007700\">}),                                             style=\"color: #0000BB\">ord  style=\"color: #007700\">(  style=\"color: #0000BB\">$var  style=\"color: #007700\">{  style=\"color: #0000BB\">$c   style=\"color: #007700\">+   style=\"color: #0000BB\">5  style=\"color: #007700\">}));                                style=\"color: #0000BB\">$c   style=\"color: #007700\">+=   style=\"color: #0000BB\">5  style=\"color: #007700\">;                                style=\"color: #0000BB\">$utf16   style=\"color: #007700\">=   style=\"color: #0000BB\">$this  style=\"color: #007700\">-   style=\"color: #0000BB\">utf82utf16  style=\"color: #007700\">(  style=\"color: #0000BB\">$char  style=\"color: #007700\">);                                style=\"color: #0000BB\">$ascii   style=\"color: #007700\">.=   style=\"color: #0000BB\">sprintf  style=\"color: #007700\">(  style=\"color: #DD0000\">'\\u%04s'  style=\"color: #007700\">,   style=\"color: #0000BB\">bin2hex  style=\"color: #007700\">(  style=\"color: #0000BB\">$utf16  style=\"color: #007700\">));                                                    }                  }                    return   style=\"color: #DD0000\">'\"'  style=\"color: #007700\">.  style=\"color: #0000BB\">$ascii  style=\"color: #007700\">.  style=\"color: #DD0000\">'\"'  style=\"color: #007700\">;                case   style=\"color: #DD0000\">'array'  style=\"color: #007700\">:                   style=\"color: #FF8000\">/*                  * As per JSON spec if any array key is not an integer                  * we must treat the the whole array as an object. We                  * also try to catch a sparsely populated associative                  * array with numeric keys here because some JS engines                  * will create an array with empty indexes up to                  * max_index which can cause memory issues and because                  * the keys, which may be relevant, will be remapped                  * otherwise.                  *                  * As per the ECMA and JSON specification an object may                  * have any string as a property. Unfortunately due to                  * a hole in the ECMA specification if the key is a                  * ECMA reserved word or starts with a digit the                  * parameter is only accessible using ECMAScript's                  * bracket notation.                  */                    // treat as a JSON object                    style=\"color: #007700\">if (  style=\"color: #0000BB\">is_array  style=\"color: #007700\">(  style=\"color: #0000BB\">$var  style=\"color: #007700\">)      style=\"color: #0000BB\">count  style=\"color: #007700\">(  style=\"color: #0000BB\">$var  style=\"color: #007700\">)    (  style=\"color: #0000BB\">array_keys  style=\"color: #007700\">(  style=\"color: #0000BB\">$var  style=\"color: #007700\">) !==   style=\"color: #0000BB\">range  style=\"color: #007700\">(  style=\"color: #0000BB\">0  style=\"color: #007700\">,   style=\"color: #0000BB\">sizeof  style=\"color: #007700\">(  style=\"color: #0000BB\">$var  style=\"color: #007700\">) -   style=\"color: #0000BB\">1  style=\"color: #007700\">))) {                        style=\"color: #0000BB\">$properties   style=\"color: #007700\">=   style=\"color: #0000BB\">array_map  style=\"color: #007700\">(array(  style=\"color: #0000BB\">$this  style=\"color: #007700\">,   style=\"color: #DD0000\">'name_value'  style=\"color: #007700\">),                                                style=\"color: #0000BB\">array_keys  style=\"color: #007700\">(  style=\"color: #0000BB\">$var  style=\"color: #007700\">),                                                style=\"color: #0000BB\">array_values  style=\"color: #007700\">(  style=\"color: #0000BB\">$var  style=\"color: #007700\">));                        foreach(  style=\"color: #0000BB\">$properties   style=\"color: #007700\">as   style=\"color: #0000BB\">$property  style=\"color: #007700\">) {                          if(  style=\"color: #0000BB\">Services_JSON  style=\"color: #007700\">::  style=\"color: #0000BB\">isError  style=\"color: #007700\">(  style=\"color: #0000BB\">$property  style=\"color: #007700\">)) {                              return   style=\"color: #0000BB\">$property  style=\"color: #007700\">;                          }                      }                        return   style=\"color: #DD0000\">'{'   style=\"color: #007700\">.   style=\"color: #0000BB\">join  style=\"color: #007700\">(  style=\"color: #DD0000\">','  style=\"color: #007700\">,   style=\"color: #0000BB\">$properties  style=\"color: #007700\">) .   style=\"color: #DD0000\">'}'  style=\"color: #007700\">;                  }                      style=\"color: #FF8000\">// treat it like a regular array                    style=\"color: #0000BB\">$elements   style=\"color: #007700\">=   style=\"color: #0000BB\">array_map  style=\"color: #007700\">(array(  style=\"color: #0000BB\">$this  style=\"color: #007700\">,   style=\"color: #DD0000\">'encode'  style=\"color: #007700\">),   style=\"color: #0000BB\">$var  style=\"color: #007700\">);                    foreach(  style=\"color: #0000BB\">$elements   style=\"color: #007700\">as   style=\"color: #0000BB\">$element  style=\"color: #007700\">) {                      if(  style=\"color: #0000BB\">Services_JSON  style=\"color: #007700\">::  style=\"color: #0000BB\">isError  style=\"color: #007700\">(  style=\"color: #0000BB\">$element  style=\"color: #007700\">)) {                          return   style=\"color: #0000BB\">$element  style=\"color: #007700\">;                      }                  }                    return   style=\"color: #DD0000\">'['   style=\"color: #007700\">.   style=\"color: #0000BB\">join  style=\"color: #007700\">(  style=\"color: #DD0000\">','  style=\"color: #007700\">,   style=\"color: #0000BB\">$elements  style=\"color: #007700\">) .   style=\"color: #DD0000\">']'  style=\"color: #007700\">;                case   style=\"color: #DD0000\">'object'  style=\"color: #007700\">:                    style=\"color: #0000BB\">$vars   style=\"color: #007700\">=   style=\"color: #0000BB\">get_object_vars  style=\"color: #007700\">(  style=\"color: #0000BB\">$var  style=\"color: #007700\">);                      style=\"color: #0000BB\">$properties   style=\"color: #007700\">=   style=\"color: #0000BB\">array_map  style=\"color: #007700\">(array(  style=\"color: #0000BB\">$this  style=\"color: #007700\">,   style=\"color: #DD0000\">'name_value'  style=\"color: #007700\">),                                            style=\"color: #0000BB\">array_keys  style=\"color: #007700\">(  style=\"color: #0000BB\">$vars  style=\"color: #007700\">),                                            style=\"color: #0000BB\">array_values  style=\"color: #007700\">(  style=\"color: #0000BB\">$vars  style=\"color: #007700\">));                    foreach(  style=\"color: #0000BB\">$properties   style=\"color: #007700\">as   style=\"color: #0000BB\">$property  style=\"color: #007700\">) {                      if(  style=\"color: #0000BB\">Services_JSON  style=\"color: #007700\">::  style=\"color: #0000BB\">isError  style=\"color: #007700\">(  style=\"color: #0000BB\">$property  style=\"color: #007700\">)) {                          return   style=\"color: #0000BB\">$property  style=\"color: #007700\">;                      }                  }                    return   style=\"color: #DD0000\">'{'   style=\"color: #007700\">.   style=\"color: #0000BB\">join  style=\"color: #007700\">(  style=\"color: #DD0000\">','  style=\"color: #007700\">,   style=\"color: #0000BB\">$properties  style=\"color: #007700\">) .   style=\"color: #DD0000\">'}'  style=\"color: #007700\">;                default:                  return (  style=\"color: #0000BB\">$this  style=\"color: #007700\">-   style=\"color: #0000BB\">use   style=\"color: #007700\">    style=\"color: #0000BB\">SERVICES_JSON_SUPPRESS_ERRORS  style=\"color: #007700\">)                      ?   style=\"color: #DD0000\">'null'                        style=\"color: #007700\">: new   style=\"color: #0000BB\">Services_JSON_Error  style=\"color: #007700\">(  style=\"color: #0000BB\">gettype  style=\"color: #007700\">(  style=\"color: #0000BB\">$var  style=\"color: #007700\">).  style=\"color: #DD0000\">\" can not be encoded as JSON string\"  style=\"color: #007700\">);          }      }         style=\"color: #FF8000\">/**      * array-walking function for use in generating JSON-formatted name-value pairs      *      * @param    string  $name   name of key to use      * @param    mixed   $value  reference to an array element to be encoded      *      * @return   string  JSON-formatted name-value pair, like '\"name\":value'      * @access   private      */        style=\"color: #007700\">function   style=\"color: #0000BB\">name_value  style=\"color: #007700\">(  style=\"color: #0000BB\">$name  style=\"color: #007700\">,   style=\"color: #0000BB\">$value  style=\"color: #007700\">)      {            style=\"color: #0000BB\">$encoded_value   style=\"color: #007700\">=   style=\"color: #0000BB\">$this  style=\"color: #007700\">-   style=\"color: #0000BB\">encode  style=\"color: #007700\">(  style=\"color: #0000BB\">$value  style=\"color: #007700\">);            if(  style=\"color: #0000BB\">Services_JSON  style=\"color: #007700\">::  style=\"color: #0000BB\">isError  style=\"color: #007700\">(  style=\"color: #0000BB\">$encoded_value  style=\"color: #007700\">)) {              return   style=\"color: #0000BB\">$encoded_value  style=\"color: #007700\">;          }            return   style=\"color: #0000BB\">$this  style=\"color: #007700\">-   style=\"color: #0000BB\">encode  style=\"color: #007700\">(  style=\"color: #0000BB\">strval  style=\"color: #007700\">(  style=\"color: #0000BB\">$name  style=\"color: #007700\">)) .   style=\"color: #DD0000\">':'   style=\"color: #007700\">.   style=\"color: #0000BB\">$encoded_value  style=\"color: #007700\">;      }         style=\"color: #FF8000\">/**      * reduce a string by removing leading and trailing comments and whitespace      *      * @param    $str    string      string value to strip of comments and whitespace      *      * @return   string  string value stripped of comments and whitespace      * @access   private      */        style=\"color: #007700\">function   style=\"color: #0000BB\">reduce_string  style=\"color: #007700\">(  style=\"color: #0000BB\">$str  style=\"color: #007700\">)      {            style=\"color: #0000BB\">$str   style=\"color: #007700\">=   style=\"color: #0000BB\">preg_replace  style=\"color: #007700\">(array(                      style=\"color: #FF8000\">// eliminate single line comments in '// ...' form                    style=\"color: #DD0000\">'#^\\s*//(.+)$#m'  style=\"color: #007700\">,                      style=\"color: #FF8000\">// eliminate multi-line comments in '/* ... */' form, at start of string                    style=\"color: #DD0000\">'#^\\s*/\\*(.+)\\*/#Us'  style=\"color: #007700\">,                      style=\"color: #FF8000\">// eliminate multi-line comments in '/* ... */' form, at end of string                    style=\"color: #DD0000\">'#/\\*(.+)\\*/\\s*$#Us'                  style=\"color: #007700\">),   style=\"color: #DD0000\">''  style=\"color: #007700\">,   style=\"color: #0000BB\">$str  style=\"color: #007700\">);              style=\"color: #FF8000\">// eliminate extraneous space            style=\"color: #007700\">return   style=\"color: #0000BB\">trim  style=\"color: #007700\">(  style=\"color: #0000BB\">$str  style=\"color: #007700\">);      }         style=\"color: #FF8000\">/**      * decodes a JSON string into appropriate variable      *      * @param    string  $str    JSON-formatted string      *      * @return   mixed   number, boolean, string, array, or object      *                   corresponding to given JSON input string.      *                   See argument 1 to Services_JSON() above for object-output behavior.      *                   Note that decode() always returns strings      *                   in ASCII or UTF-8 format!      * @access   public      */        style=\"color: #007700\">function   style=\"color: #0000BB\">decode  style=\"color: #007700\">(  style=\"color: #0000BB\">$str  style=\"color: #007700\">)      {            style=\"color: #0000BB\">$str   style=\"color: #007700\">=   style=\"color: #0000BB\">$this  style=\"color: #007700\">-   style=\"color: #0000BB\">reduce_string  style=\"color: #007700\">(  style=\"color: #0000BB\">$str  style=\"color: #007700\">);            switch (  style=\"color: #0000BB\">strtolower  style=\"color: #007700\">(  style=\"color: #0000BB\">$str  style=\"color: #007700\">)) {              case   style=\"color: #DD0000\">'true'  style=\"color: #007700\">:                  return   style=\"color: #0000BB\">true  style=\"color: #007700\">;                case   style=\"color: #DD0000\">'false'  style=\"color: #007700\">:                  return   style=\"color: #0000BB\">false  style=\"color: #007700\">;                case   style=\"color: #DD0000\">'null'  style=\"color: #007700\">:                  return   style=\"color: #0000BB\">null  style=\"color: #007700\">;                default:                    style=\"color: #0000BB\">$m   style=\"color: #007700\">=                     if (  style=\"color: #0000BB\">is_numeric  style=\"color: #007700\">(  style=\"color: #0000BB\">$str  style=\"color: #007700\">)) {                        style=\"color: #FF8000\">// Lookie-loo, it's a number                        // This would work on its own, but I'm trying to be                      // good about returning integers where appropriate:                      // return                         // Return float or int, as appropriate                        style=\"color: #007700\">return ((float)  style=\"color: #0000BB\">$str   style=\"color: #007700\">== (integer)  style=\"color: #0000BB\">$str  style=\"color: #007700\">)                          ? (integer)  style=\"color: #0000BB\">$str                            style=\"color: #007700\">: (float)  style=\"color: #0000BB\">$str  style=\"color: #007700\">;                    } elseif (  style=\"color: #0000BB\">preg_match  style=\"color: #007700\">(  style=\"color: #DD0000\">'/^(\"|\\').*(\\1)$/s'  style=\"color: #007700\">,   style=\"color: #0000BB\">$str  style=\"color: #007700\">,   style=\"color: #0000BB\">$m  style=\"color: #007700\">)      style=\"color: #0000BB\">$m  style=\"color: #007700\">[  style=\"color: #0000BB\">1  style=\"color: #007700\">] ==   style=\"color: #0000BB\">$m  style=\"color: #007700\">[  style=\"color: #0000BB\">2  style=\"color: #007700\">]) {                        style=\"color: #FF8000\">// STRINGS RETURNED IN UTF-8 FORMAT                        style=\"color: #0000BB\">$delim   style=\"color: #007700\">=   style=\"color: #0000BB\">substr  style=\"color: #007700\">(  style=\"color: #0000BB\">$str  style=\"color: #007700\">,   style=\"color: #0000BB\">0  style=\"color: #007700\">,   style=\"color: #0000BB\">1  style=\"color: #007700\">);                        style=\"color: #0000BB\">$chrs   style=\"color: #007700\">=   style=\"color: #0000BB\">substr  style=\"color: #007700\">(  style=\"color: #0000BB\">$str  style=\"color: #007700\">,   style=\"color: #0000BB\">1  style=\"color: #007700\">, -  style=\"color: #0000BB\">1  style=\"color: #007700\">);                        style=\"color: #0000BB\">$utf8   style=\"color: #007700\">=   style=\"color: #DD0000\">''  style=\"color: #007700\">;                        style=\"color: #0000BB\">$strlen_chrs   style=\"color: #007700\">=   style=\"color: #0000BB\">strlen  style=\"color: #007700\">(  style=\"color: #0000BB\">$chrs  style=\"color: #007700\">);                        for (  style=\"color: #0000BB\">$c   style=\"color: #007700\">=   style=\"color: #0000BB\">0  style=\"color: #007700\">;   style=\"color: #0000BB\">$c   style=\"color: #007700\">    style=\"color: #0000BB\">$strlen_chrs  style=\"color: #007700\">; ++  style=\"color: #0000BB\">$c  style=\"color: #007700\">) {                              style=\"color: #0000BB\">$substr_chrs_c_2   style=\"color: #007700\">=   style=\"color: #0000BB\">substr  style=\"color: #007700\">(  style=\"color: #0000BB\">$chrs  style=\"color: #007700\">,   style=\"color: #0000BB\">$c  style=\"color: #007700\">,   style=\"color: #0000BB\">2  style=\"color: #007700\">);                            style=\"color: #0000BB\">$ord_chrs_c   style=\"color: #007700\">=   style=\"color: #0000BB\">ord  style=\"color: #007700\">(  style=\"color: #0000BB\">$chrs  style=\"color: #007700\">{  style=\"color: #0000BB\">$c  style=\"color: #007700\">});                            switch (  style=\"color: #0000BB\">true  style=\"color: #007700\">) {                              case   style=\"color: #0000BB\">$substr_chrs_c_2   style=\"color: #007700\">==   style=\"color: #DD0000\">'\\b'  style=\"color: #007700\">:                                    style=\"color: #0000BB\">$utf8   style=\"color: #007700\">.=   style=\"color: #0000BB\">chr  style=\"color: #007700\">(  style=\"color: #0000BB\">0x08  style=\"color: #007700\">);                                  ++  style=\"color: #0000BB\">$c  style=\"color: #007700\">;                                                                case   style=\"color: #0000BB\">$substr_chrs_c_2   style=\"color: #007700\">==   style=\"color: #DD0000\">' '  style=\"color: #007700\">:                                    style=\"color: #0000BB\">$utf8   style=\"color: #007700\">.=   style=\"color: #0000BB\">chr  style=\"color: #007700\">(  style=\"color: #0000BB\">0x09  style=\"color: #007700\">);                                  ++  style=\"color: #0000BB\">$c  style=\"color: #007700\">;                                                                case   style=\"color: #0000BB\">$substr_chrs_c_2   style=\"color: #007700\">==   style=\"color: #DD0000\">' '  style=\"color: #007700\">:                                    style=\"color: #0000BB\">$utf8   style=\"color: #007700\">.=   style=\"color: #0000BB\">chr  style=\"color: #007700\">(  style=\"color: #0000BB\">0x0A  style=\"color: #007700\">);                                  ++  style=\"color: #0000BB\">$c  style=\"color: #007700\">;                                                                case   style=\"color: #0000BB\">$substr_chrs_c_2   style=\"color: #007700\">==   style=\"color: #DD0000\">'\\f'  style=\"color: #007700\">:                                    style=\"color: #0000BB\">$utf8   style=\"color: #007700\">.=   style=\"color: #0000BB\">chr  style=\"color: #007700\">(  style=\"color: #0000BB\">0x0C  style=\"color: #007700\">);                                  ++  style=\"color: #0000BB\">$c  style=\"color: #007700\">;                                                                case   style=\"color: #0000BB\">$substr_chrs_c_2   style=\"color: #007700\">==   style=\"color: #DD0000\">' '  style=\"color: #007700\">:                                    style=\"color: #0000BB\">$utf8   style=\"color: #007700\">.=   style=\"color: #0000BB\">chr  style=\"color: #007700\">(  style=\"color: #0000BB\">0x0D  style=\"color: #007700\">);                                  ++  style=\"color: #0000BB\">$c  style=\"color: #007700\">;                                                                  case   style=\"color: #0000BB\">$substr_chrs_c_2   style=\"color: #007700\">==   style=\"color: #DD0000\">'\\\\\"'  style=\"color: #007700\">:                              case   style=\"color: #0000BB\">$substr_chrs_c_2   style=\"color: #007700\">==   style=\"color: #DD0000\">'\\\\\\''  style=\"color: #007700\">:                              case   style=\"color: #0000BB\">$substr_chrs_c_2   style=\"color: #007700\">==   style=\"color: #DD0000\">'\\\\\\\\'  style=\"color: #007700\">:                              case   style=\"color: #0000BB\">$substr_chrs_c_2   style=\"color: #007700\">==   style=\"color: #DD0000\">'\\\\/'  style=\"color: #007700\">:                                  if ((  style=\"color: #0000BB\">$delim   style=\"color: #007700\">==   style=\"color: #DD0000\">'\"'   style=\"color: #007700\">     style=\"color: #0000BB\">$substr_chrs_c_2   style=\"color: #007700\">!=   style=\"color: #DD0000\">'\\\\\\''  style=\"color: #007700\">) ||                                     (  style=\"color: #0000BB\">$delim   style=\"color: #007700\">==   style=\"color: #DD0000\">\"'\"   style=\"color: #007700\">     style=\"color: #0000BB\">$substr_chrs_c_2   style=\"color: #007700\">!=   style=\"color: #DD0000\">'\\\\\"'  style=\"color: #007700\">)) {                                        style=\"color: #0000BB\">$utf8   style=\"color: #007700\">.=   style=\"color: #0000BB\">$chrs  style=\"color: #007700\">{++  style=\"color: #0000BB\">$c  style=\"color: #007700\">};                                  }                                                                  case   style=\"color: #0000BB\">preg_match  style=\"color: #007700\">(  style=\"color: #DD0000\">'/\\\\\\u[0-9A-F]{4}/i'  style=\"color: #007700\">,   style=\"color: #0000BB\">substr  style=\"color: #007700\">(  style=\"color: #0000BB\">$chrs  style=\"color: #007700\">,   style=\"color: #0000BB\">$c  style=\"color: #007700\">,   style=\"color: #0000BB\">6  style=\"color: #007700\">)):                                    style=\"color: #FF8000\">// single, escaped unicode character                                    style=\"color: #0000BB\">$utf16   style=\"color: #007700\">=   style=\"color: #0000BB\">chr  style=\"color: #007700\">(  style=\"color: #0000BB\">hexdec  style=\"color: #007700\">(  style=\"color: #0000BB\">substr  style=\"color: #007700\">(  style=\"color: #0000BB\">$chrs  style=\"color: #007700\">, (  style=\"color: #0000BB\">$c   style=\"color: #007700\">+   style=\"color: #0000BB\">2  style=\"color: #007700\">),   style=\"color: #0000BB\">2  style=\"color: #007700\">)))                                         .   style=\"color: #0000BB\">chr  style=\"color: #007700\">(  style=\"color: #0000BB\">hexdec  style=\"color: #007700\">(  style=\"color: #0000BB\">substr  style=\"color: #007700\">(  style=\"color: #0000BB\">$chrs  style=\"color: #007700\">, (  style=\"color: #0000BB\">$c   style=\"color: #007700\">+   style=\"color: #0000BB\">4  style=\"color: #007700\">),   style=\"color: #0000BB\">2  style=\"color: #007700\">)));                                    style=\"color: #0000BB\">$utf8   style=\"color: #007700\">.=   style=\"color: #0000BB\">$this  style=\"color: #007700\">-   style=\"color: #0000BB\">utf162utf8  style=\"color: #007700\">(  style=\"color: #0000BB\">$utf16  style=\"color: #007700\">);                                    style=\"color: #0000BB\">$c   style=\"color: #007700\">+=   style=\"color: #0000BB\">5  style=\"color: #007700\">;                                                                  case (  style=\"color: #0000BB\">$ord_chrs_c   style=\"color: #007700\"> =   style=\"color: #0000BB\">0x20  style=\"color: #007700\">)    (  style=\"color: #0000BB\">$ord_chrs_c   style=\"color: #007700\"> =   style=\"color: #0000BB\">0x7F  style=\"color: #007700\">):                                    style=\"color: #0000BB\">$utf8   style=\"color: #007700\">.=   style=\"color: #0000BB\">$chrs  style=\"color: #007700\">{  style=\"color: #0000BB\">$c  style=\"color: #007700\">};                                                                  case (  style=\"color: #0000BB\">$ord_chrs_c   style=\"color: #007700\">    style=\"color: #0000BB\">0xE0  style=\"color: #007700\">) ==   style=\"color: #0000BB\">0xC0  style=\"color: #007700\">:                                    style=\"color: #FF8000\">// characters U-00000080 - U-000007FF, mask 110XXXXX                                  //see http://www.cl.cam.ac.uk/~mgk25/unicode.html#utf-8                                    style=\"color: #0000BB\">$utf8   style=\"color: #007700\">.=   style=\"color: #0000BB\">substr  style=\"color: #007700\">(  style=\"color: #0000BB\">$chrs  style=\"color: #007700\">,   style=\"color: #0000BB\">$c  style=\"color: #007700\">,   style=\"color: #0000BB\">2  style=\"color: #007700\">);                                  ++  style=\"color: #0000BB\">$c  style=\"color: #007700\">;                                                                  case (  style=\"color: #0000BB\">$ord_chrs_c   style=\"color: #007700\">    style=\"color: #0000BB\">0xF0  style=\"color: #007700\">) ==   style=\"color: #0000BB\">0xE0  style=\"color: #007700\">:                                    style=\"color: #FF8000\">// characters U-00000800 - U-0000FFFF, mask 1110XXXX                                  // see http://www.cl.cam.ac.uk/~mgk25/unicode.html#utf-8                                    style=\"color: #0000BB\">$utf8   style=\"color: #007700\">.=   style=\"color: #0000BB\">substr  style=\"color: #007700\">(  style=\"color: #0000BB\">$chrs  style=\"color: #007700\">,   style=\"color: #0000BB\">$c  style=\"color: #007700\">,   style=\"color: #0000BB\">3  style=\"color: #007700\">);                                    style=\"color: #0000BB\">$c   style=\"color: #007700\">+=   style=\"color: #0000BB\">2  style=\"color: #007700\">;                                                                  case (  style=\"color: #0000BB\">$ord_chrs_c   style=\"color: #007700\">    style=\"color: #0000BB\">0xF8  style=\"color: #007700\">) ==   style=\"color: #0000BB\">0xF0  style=\"color: #007700\">:                                    style=\"color: #FF8000\">// characters U-00010000 - U-001FFFFF, mask 11110XXX                                  // see http://www.cl.cam.ac.uk/~mgk25/unicode.html#utf-8                                    style=\"color: #0000BB\">$utf8   style=\"color: #007700\">.=   style=\"color: #0000BB\">substr  style=\"color: #007700\">(  style=\"color: #0000BB\">$chrs  style=\"color: #007700\">,   style=\"color: #0000BB\">$c  style=\"color: #007700\">,   style=\"color: #0000BB\">4  style=\"color: #007700\">);                                    style=\"color: #0000BB\">$c   style=\"color: #007700\">+=   style=\"color: #0000BB\">3  style=\"color: #007700\">;                                                                  case (  style=\"color: #0000BB\">$ord_chrs_c   style=\"color: #007700\">    style=\"color: #0000BB\">0xFC  style=\"color: #007700\">) ==   style=\"color: #0000BB\">0xF8  style=\"color: #007700\">:                                    style=\"color: #FF8000\">// characters U-00200000 - U-03FFFFFF, mask 111110XX                                  // see http://www.cl.cam.ac.uk/~mgk25/unicode.html#utf-8                                    style=\"color: #0000BB\">$utf8   style=\"color: #007700\">.=   style=\"color: #0000BB\">substr  style=\"color: #007700\">(  style=\"color: #0000BB\">$chrs  style=\"color: #007700\">,   style=\"color: #0000BB\">$c  style=\"color: #007700\">,   style=\"color: #0000BB\">5  style=\"color: #007700\">);                                    style=\"color: #0000BB\">$c   style=\"color: #007700\">+=   style=\"color: #0000BB\">4  style=\"color: #007700\">;                                                                  case (  style=\"color: #0000BB\">$ord_chrs_c   style=\"color: #007700\">    style=\"color: #0000BB\">0xFE  style=\"color: #007700\">) ==   style=\"color: #0000BB\">0xFC  style=\"color: #007700\">:                                    style=\"color: #FF8000\">// characters U-04000000 - U-7FFFFFFF, mask 1111110X                                  // see http://www.cl.cam.ac.uk/~mgk25/unicode.html#utf-8                                    style=\"color: #0000BB\">$utf8   style=\"color: #007700\">.=   style=\"color: #0000BB\">substr  style=\"color: #007700\">(  style=\"color: #0000BB\">$chrs  style=\"color: #007700\">,   style=\"color: #0000BB\">$c  style=\"color: #007700\">,   style=\"color: #0000BB\">6  style=\"color: #007700\">);                                    style=\"color: #0000BB\">$c   style=\"color: #007700\">+=   style=\"color: #0000BB\">5  style=\"color: #007700\">;                                                              }                        }                        return   style=\"color: #0000BB\">$utf8  style=\"color: #007700\">;                    } elseif (  style=\"color: #0000BB\">preg_match  style=\"color: #007700\">(  style=\"color: #DD0000\">'/^\\[.*\\]$/s'  style=\"color: #007700\">,   style=\"color: #0000BB\">$str  style=\"color: #007700\">) ||   style=\"color: #0000BB\">preg_match  style=\"color: #007700\">(  style=\"color: #DD0000\">'/^\\{.*\\}$/s'  style=\"color: #007700\">,   style=\"color: #0000BB\">$str  style=\"color: #007700\">)) {                        style=\"color: #FF8000\">// array, or object notation                          style=\"color: #007700\">if (  style=\"color: #0000BB\">$str  style=\"color: #007700\">{  style=\"color: #0000BB\">0  style=\"color: #007700\">} ==   style=\"color: #DD0000\">'['  style=\"color: #007700\">) {                            style=\"color: #0000BB\">$stk   style=\"color: #007700\">= array(  style=\"color: #0000BB\">SERVICES_JSON_IN_ARR  style=\"color: #007700\">);                            style=\"color: #0000BB\">$arr   style=\"color: #007700\">=                       } else {                          if (  style=\"color: #0000BB\">$this  style=\"color: #007700\">-   style=\"color: #0000BB\">use   style=\"color: #007700\">    style=\"color: #0000BB\">SERVICES_JSON_LOOSE_TYPE  style=\"color: #007700\">) {                                style=\"color: #0000BB\">$stk   style=\"color: #007700\">= array(  style=\"color: #0000BB\">SERVICES_JSON_IN_OBJ  style=\"color: #007700\">);                                style=\"color: #0000BB\">$obj   style=\"color: #007700\">=                           } else {                                style=\"color: #0000BB\">$stk   style=\"color: #007700\">= array(  style=\"color: #0000BB\">SERVICES_JSON_IN_OBJ  style=\"color: #007700\">);                                style=\"color: #0000BB\">$obj   style=\"color: #007700\">= new   style=\"color: #0000BB\">stdClass  style=\"color: #007700\">();                          }                      }                          style=\"color: #0000BB\">array_push  style=\"color: #007700\">(  style=\"color: #0000BB\">$stk  style=\"color: #007700\">, array(  style=\"color: #DD0000\">'what'    style=\"color: #007700\">=    style=\"color: #0000BB\">SERVICES_JSON_SLICE  style=\"color: #007700\">,                                               style=\"color: #DD0000\">'where'   style=\"color: #007700\">=    style=\"color: #0000BB\">0  style=\"color: #007700\">,                                               style=\"color: #DD0000\">'delim'   style=\"color: #007700\">=    style=\"color: #0000BB\">false  style=\"color: #007700\">));                          style=\"color: #0000BB\">$chrs   style=\"color: #007700\">=   style=\"color: #0000BB\">substr  style=\"color: #007700\">(  style=\"color: #0000BB\">$str  style=\"color: #007700\">,   style=\"color: #0000BB\">1  style=\"color: #007700\">, -  style=\"color: #0000BB\">1  style=\"color: #007700\">);                        style=\"color: #0000BB\">$chrs   style=\"color: #007700\">=   style=\"color: #0000BB\">$this  style=\"color: #007700\">-   style=\"color: #0000BB\">reduce_string  style=\"color: #007700\">(  style=\"color: #0000BB\">$chrs  style=\"color: #007700\">);                        if (  style=\"color: #0000BB\">$chrs   style=\"color: #007700\">==   style=\"color: #DD0000\">''  style=\"color: #007700\">) {                          if (  style=\"color: #0000BB\">reset  style=\"color: #007700\">(  style=\"color: #0000BB\">$stk  style=\"color: #007700\">) ==   style=\"color: #0000BB\">SERVICES_JSON_IN_ARR  style=\"color: #007700\">) {                              return   style=\"color: #0000BB\">$arr  style=\"color: #007700\">;                            } else {                              return   style=\"color: #0000BB\">$obj  style=\"color: #007700\">;                            }                      }                          style=\"color: #FF8000\">//print(\" parsing {$chrs} \");                          style=\"color: #0000BB\">$strlen_chrs   style=\"color: #007700\">=   style=\"color: #0000BB\">strlen  style=\"color: #007700\">(  style=\"color: #0000BB\">$chrs  style=\"color: #007700\">);                        for (  style=\"color: #0000BB\">$c   style=\"color: #007700\">=   style=\"color: #0000BB\">0  style=\"color: #007700\">;   style=\"color: #0000BB\">$c   style=\"color: #007700\"> =   style=\"color: #0000BB\">$strlen_chrs  style=\"color: #007700\">; ++  style=\"color: #0000BB\">$c  style=\"color: #007700\">) {                              style=\"color: #0000BB\">$top   style=\"color: #007700\">=   style=\"color: #0000BB\">end  style=\"color: #007700\">(  style=\"color: #0000BB\">$stk  style=\"color: #007700\">);                            style=\"color: #0000BB\">$substr_chrs_c_2   style=\"color: #007700\">=   style=\"color: #0000BB\">substr  style=\"color: #007700\">(  style=\"color: #0000BB\">$chrs  style=\"color: #007700\">,   style=\"color: #0000BB\">$c  style=\"color: #007700\">,   style=\"color: #0000BB\">2  style=\"color: #007700\">);                            if ((  style=\"color: #0000BB\">$c   style=\"color: #007700\">==   style=\"color: #0000BB\">$strlen_chrs  style=\"color: #007700\">) || ((  style=\"color: #0000BB\">$chrs  style=\"color: #007700\">{  style=\"color: #0000BB\">$c  style=\"color: #007700\">} ==   style=\"color: #DD0000\">','  style=\"color: #007700\">)    (  style=\"color: #0000BB\">$top  style=\"color: #007700\">[  style=\"color: #DD0000\">'what'  style=\"color: #007700\">] ==   style=\"color: #0000BB\">SERVICES_JSON_SLICE  style=\"color: #007700\">))) {                                style=\"color: #FF8000\">// found a comma that is not inside a string, array, etc.,                              // OR we've reached the end of the character list                                style=\"color: #0000BB\">$slice   style=\"color: #007700\">=   style=\"color: #0000BB\">substr  style=\"color: #007700\">(  style=\"color: #0000BB\">$chrs  style=\"color: #007700\">,   style=\"color: #0000BB\">$top  style=\"color: #007700\">[  style=\"color: #DD0000\">'where'  style=\"color: #007700\">], (  style=\"color: #0000BB\">$c   style=\"color: #007700\">-   style=\"color: #0000BB\">$top  style=\"color: #007700\">[  style=\"color: #DD0000\">'where'  style=\"color: #007700\">]));                                style=\"color: #0000BB\">array_push  style=\"color: #007700\">(  style=\"color: #0000BB\">$stk  style=\"color: #007700\">, array(  style=\"color: #DD0000\">'what'   style=\"color: #007700\">=    style=\"color: #0000BB\">SERVICES_JSON_SLICE  style=\"color: #007700\">,   style=\"color: #DD0000\">'where'   style=\"color: #007700\">=  (  style=\"color: #0000BB\">$c   style=\"color: #007700\">+   style=\"color: #0000BB\">1  style=\"color: #007700\">),   style=\"color: #DD0000\">'delim'   style=\"color: #007700\">=    style=\"color: #0000BB\">false  style=\"color: #007700\">));                                style=\"color: #FF8000\">//print(\"Found split at {$c}: \".substr($chrs, $top['where'], (1 + $c - $top['where'])).\" \");                                  style=\"color: #007700\">if (  style=\"color: #0000BB\">reset  style=\"color: #007700\">(  style=\"color: #0000BB\">$stk  style=\"color: #007700\">) ==   style=\"color: #0000BB\">SERVICES_JSON_IN_ARR  style=\"color: #007700\">) {                                    style=\"color: #FF8000\">// we are in an array, so just push an element onto the stack                                    style=\"color: #0000BB\">array_push  style=\"color: #007700\">(  style=\"color: #0000BB\">$arr  style=\"color: #007700\">,   style=\"color: #0000BB\">$this  style=\"color: #007700\">-   style=\"color: #0000BB\">decode  style=\"color: #007700\">(  style=\"color: #0000BB\">$slice  style=\"color: #007700\">));                                } elseif (  style=\"color: #0000BB\">reset  style=\"color: #007700\">(  style=\"color: #0000BB\">$stk  style=\"color: #007700\">) ==   style=\"color: #0000BB\">SERVICES_JSON_IN_OBJ  style=\"color: #007700\">) {                                    style=\"color: #FF8000\">// we are in an object, so figure                                  // out the property name and set an                                  // element in an associative array,                                  // for now                                    style=\"color: #0000BB\">$parts   style=\"color: #007700\">=                                                                     if (  style=\"color: #0000BB\">preg_match  style=\"color: #007700\">(  style=\"color: #DD0000\">'/^\\s*([\"\\'].*[^\\\\\\][\"\\'])\\s*:\\s*(\\S.*),?$/Uis'  style=\"color: #007700\">,   style=\"color: #0000BB\">$slice  style=\"color: #007700\">,   style=\"color: #0000BB\">$parts  style=\"color: #007700\">)) {                                        style=\"color: #FF8000\">// \"name\":value pair                                        style=\"color: #0000BB\">$key   style=\"color: #007700\">=   style=\"color: #0000BB\">$this  style=\"color: #007700\">-   style=\"color: #0000BB\">decode  style=\"color: #007700\">(  style=\"color: #0000BB\">$parts  style=\"color: #007700\">[  style=\"color: #0000BB\">1  style=\"color: #007700\">]);                                        style=\"color: #0000BB\">$val   style=\"color: #007700\">=   style=\"color: #0000BB\">$this  style=\"color: #007700\">-   style=\"color: #0000BB\">decode  style=\"color: #007700\">(  style=\"color: #0000BB\">$parts  style=\"color: #007700\">[  style=\"color: #0000BB\">2  style=\"color: #007700\">]);                                        if (  style=\"color: #0000BB\">$this  style=\"color: #007700\">-   style=\"color: #0000BB\">use   style=\"color: #007700\">    style=\"color: #0000BB\">SERVICES_JSON_LOOSE_TYPE  style=\"color: #007700\">) {                                            style=\"color: #0000BB\">$obj  style=\"color: #007700\">[  style=\"color: #0000BB\">$key  style=\"color: #007700\">] =   style=\"color: #0000BB\">$val  style=\"color: #007700\">;                                      } else {                                            style=\"color: #0000BB\">$obj  style=\"color: #007700\">-   style=\"color: #0000BB\">$key   style=\"color: #007700\">=   style=\"color: #0000BB\">$val  style=\"color: #007700\">;                                      }                                  } elseif (  style=\"color: #0000BB\">preg_match  style=\"color: #007700\">(  style=\"color: #DD0000\">'/^\\s*(\\w+)\\s*:\\s*(\\S.*),?$/Uis'  style=\"color: #007700\">,   style=\"color: #0000BB\">$slice  style=\"color: #007700\">,   style=\"color: #0000BB\">$parts  style=\"color: #007700\">)) {                                        style=\"color: #FF8000\">// name:value pair, where name is unquoted                                        style=\"color: #0000BB\">$key   style=\"color: #007700\">=   style=\"color: #0000BB\">$parts  style=\"color: #007700\">[  style=\"color: #0000BB\">1  style=\"color: #007700\">];                                        style=\"color: #0000BB\">$val   style=\"color: #007700\">=   style=\"color: #0000BB\">$this  style=\"color: #007700\">-   style=\"color: #0000BB\">decode  style=\"color: #007700\">(  style=\"color: #0000BB\">$parts  style=\"color: #007700\">[  style=\"color: #0000BB\">2  style=\"color: #007700\">]);                                        if (  style=\"color: #0000BB\">$this  style=\"color: #007700\">-   style=\"color: #0000BB\">use   style=\"color: #007700\">    style=\"color: #0000BB\">SERVICES_JSON_LOOSE_TYPE  style=\"color: #007700\">) {                                            style=\"color: #0000BB\">$obj  style=\"color: #007700\">[  style=\"color: #0000BB\">$key  style=\"color: #007700\">] =   style=\"color: #0000BB\">$val  style=\"color: #007700\">;                                      } else {                                            style=\"color: #0000BB\">$obj  style=\"color: #007700\">-   style=\"color: #0000BB\">$key   style=\"color: #007700\">=   style=\"color: #0000BB\">$val  style=\"color: #007700\">;                                      }                                  }                                }                            } elseif (((  style=\"color: #0000BB\">$chrs  style=\"color: #007700\">{  style=\"color: #0000BB\">$c  style=\"color: #007700\">} ==   style=\"color: #DD0000\">'\"'  style=\"color: #007700\">) || (  style=\"color: #0000BB\">$chrs  style=\"color: #007700\">{  style=\"color: #0000BB\">$c  style=\"color: #007700\">} ==   style=\"color: #DD0000\">\"'\"  style=\"color: #007700\">))    (  style=\"color: #0000BB\">$top  style=\"color: #007700\">[  style=\"color: #DD0000\">'what'  style=\"color: #007700\">] !=   style=\"color: #0000BB\">SERVICES_JSON_IN_STR  style=\"color: #007700\">)) {                                style=\"color: #FF8000\">// found a quote, and we are not inside a string                                style=\"color: #0000BB\">array_push  style=\"color: #007700\">(  style=\"color: #0000BB\">$stk  style=\"color: #007700\">, array(  style=\"color: #DD0000\">'what'   style=\"color: #007700\">=    style=\"color: #0000BB\">SERVICES_JSON_IN_STR  style=\"color: #007700\">,   style=\"color: #DD0000\">'where'   style=\"color: #007700\">=    style=\"color: #0000BB\">$c  style=\"color: #007700\">,   style=\"color: #DD0000\">'delim'   style=\"color: #007700\">=    style=\"color: #0000BB\">$chrs  style=\"color: #007700\">{  style=\"color: #0000BB\">$c  style=\"color: #007700\">}));                                style=\"color: #FF8000\">//print(\"Found start of string at {$c} \");                              style=\"color: #007700\">} elseif ((  style=\"color: #0000BB\">$chrs  style=\"color: #007700\">{  style=\"color: #0000BB\">$c  style=\"color: #007700\">} ==   style=\"color: #0000BB\">$top  style=\"color: #007700\">[  style=\"color: #DD0000\">'delim'  style=\"color: #007700\">])                                      (  style=\"color: #0000BB\">$top  style=\"color: #007700\">[  style=\"color: #DD0000\">'what'  style=\"color: #007700\">] ==   style=\"color: #0000BB\">SERVICES_JSON_IN_STR  style=\"color: #007700\">)                                      ((  style=\"color: #0000BB\">strlen  style=\"color: #007700\">(  style=\"color: #0000BB\">substr  style=\"color: #007700\">(  style=\"color: #0000BB\">$chrs  style=\"color: #007700\">,   style=\"color: #0000BB\">0  style=\"color: #007700\">,   style=\"color: #0000BB\">$c  style=\"color: #007700\">)) -   style=\"color: #0000BB\">strlen  style=\"color: #007700\">(  style=\"color: #0000BB\">rtrim  style=\"color: #007700\">(  style=\"color: #0000BB\">substr  style=\"color: #007700\">(  style=\"color: #0000BB\">$chrs  style=\"color: #007700\">,   style=\"color: #0000BB\">0  style=\"color: #007700\">,   style=\"color: #0000BB\">$c  style=\"color: #007700\">),   style=\"color: #DD0000\">'\\\\'  style=\"color: #007700\">))) %   style=\"color: #0000BB\">2   style=\"color: #007700\">!=   style=\"color: #0000BB\">1  style=\"color: #007700\">)) {                                style=\"color: #FF8000\">// found a quote, we're in a string, and it's not escaped                              // we know that it's not escaped becase there is _not_ an                              // odd number of backslashes at the end of the string so far                                style=\"color: #0000BB\">array_pop  style=\"color: #007700\">(  style=\"color: #0000BB\">$stk  style=\"color: #007700\">);                                style=\"color: #FF8000\">//print(\"Found end of string at {$c}: \".substr($chrs, $top['where'], (1 + 1 + $c - $top['where'])).\" \");                              style=\"color: #007700\">} elseif ((  style=\"color: #0000BB\">$chrs  style=\"color: #007700\">{  style=\"color: #0000BB\">$c  style=\"color: #007700\">} ==   style=\"color: #DD0000\">'['  style=\"color: #007700\">)                                        style=\"color: #0000BB\">in_array  style=\"color: #007700\">(  style=\"color: #0000BB\">$top  style=\"color: #007700\">[  style=\"color: #DD0000\">'what'  style=\"color: #007700\">], array(  style=\"color: #0000BB\">SERVICES_JSON_SLICE  style=\"color: #007700\">,   style=\"color: #0000BB\">SERVICES_JSON_IN_ARR  style=\"color: #007700\">,   style=\"color: #0000BB\">SERVICES_JSON_IN_OBJ  style=\"color: #007700\">))) {                                style=\"color: #FF8000\">// found a left-bracket, and we are in an array, object, or slice                                style=\"color: #0000BB\">array_push  style=\"color: #007700\">(  style=\"color: #0000BB\">$stk  style=\"color: #007700\">, array(  style=\"color: #DD0000\">'what'   style=\"color: #007700\">=    style=\"color: #0000BB\">SERVICES_JSON_IN_ARR  style=\"color: #007700\">,   style=\"color: #DD0000\">'where'   style=\"color: #007700\">=    style=\"color: #0000BB\">$c  style=\"color: #007700\">,   style=\"color: #DD0000\">'delim'   style=\"color: #007700\">=    style=\"color: #0000BB\">false  style=\"color: #007700\">));                                style=\"color: #FF8000\">//print(\"Found start of array at {$c} \");                              style=\"color: #007700\">} elseif ((  style=\"color: #0000BB\">$chrs  style=\"color: #007700\">{  style=\"color: #0000BB\">$c  style=\"color: #007700\">} ==   style=\"color: #DD0000\">']'  style=\"color: #007700\">)    (  style=\"color: #0000BB\">$top  style=\"color: #007700\">[  style=\"color: #DD0000\">'what'  style=\"color: #007700\">] ==   style=\"color: #0000BB\">SERVICES_JSON_IN_ARR  style=\"color: #007700\">)) {                                style=\"color: #FF8000\">// found a right-bracket, and we're in an array                                style=\"color: #0000BB\">array_pop  style=\"color: #007700\">(  style=\"color: #0000BB\">$stk  style=\"color: #007700\">);                                style=\"color: #FF8000\">//print(\"Found end of array at {$c}: \".substr($chrs, $top['where'], (1 + $c - $top['where'])).\" \");                              style=\"color: #007700\">} elseif ((  style=\"color: #0000BB\">$chrs  style=\"color: #007700\">{  style=\"color: #0000BB\">$c  style=\"color: #007700\">} ==   style=\"color: #DD0000\">'{'  style=\"color: #007700\">)                                        style=\"color: #0000BB\">in_array  style=\"color: #007700\">(  style=\"color: #0000BB\">$top  style=\"color: #007700\">[  style=\"color: #DD0000\">'what'  style=\"color: #007700\">], array(  style=\"color: #0000BB\">SERVICES_JSON_SLICE  style=\"color: #007700\">,   style=\"color: #0000BB\">SERVICES_JSON_IN_ARR  style=\"color: #007700\">,   style=\"color: #0000BB\">SERVICES_JSON_IN_OBJ  style=\"color: #007700\">))) {                                style=\"color: #FF8000\">// found a left-brace, and we are in an array, object, or slice                                style=\"color: #0000BB\">array_push  style=\"color: #007700\">(  style=\"color: #0000BB\">$stk  style=\"color: #007700\">, array(  style=\"color: #DD0000\">'what'   style=\"color: #007700\">=    style=\"color: #0000BB\">SERVICES_JSON_IN_OBJ  style=\"color: #007700\">,   style=\"color: #DD0000\">'where'   style=\"color: #007700\">=    style=\"color: #0000BB\">$c  style=\"color: #007700\">,   style=\"color: #DD0000\">'delim'   style=\"color: #007700\">=    style=\"color: #0000BB\">false  style=\"color: #007700\">));                                style=\"color: #FF8000\">//print(\"Found start of object at {$c} \");                              style=\"color: #007700\">} elseif ((  style=\"color: #0000BB\">$chrs  style=\"color: #007700\">{  style=\"color: #0000BB\">$c  style=\"color: #007700\">} ==   style=\"color: #DD0000\">'}'  style=\"color: #007700\">)    (  style=\"color: #0000BB\">$top  style=\"color: #007700\">[  style=\"color: #DD0000\">'what'  style=\"color: #007700\">] ==   style=\"color: #0000BB\">SERVICES_JSON_IN_OBJ  style=\"color: #007700\">)) {                                style=\"color: #FF8000\">// found a right-brace, and we're in an object                                style=\"color: #0000BB\">array_pop  style=\"color: #007700\">(  style=\"color: #0000BB\">$stk  style=\"color: #007700\">);                                style=\"color: #FF8000\">//print(\"Found end of object at {$c}: \".substr($chrs, $top['where'], (1 + $c - $top['where'])).\" \");                              style=\"color: #007700\">} elseif ((  style=\"color: #0000BB\">$substr_chrs_c_2   style=\"color: #007700\">==   style=\"color: #DD0000\">'/*'  style=\"color: #007700\">)                                        style=\"color: #0000BB\">in_array  style=\"color: #007700\">(  style=\"color: #0000BB\">$top  style=\"color: #007700\">[  style=\"color: #DD0000\">'what'  style=\"color: #007700\">], array(  style=\"color: #0000BB\">SERVICES_JSON_SLICE  style=\"color: #007700\">,   style=\"color: #0000BB\">SERVICES_JSON_IN_ARR  style=\"color: #007700\">,   style=\"color: #0000BB\">SERVICES_JSON_IN_OBJ  style=\"color: #007700\">))) {                                style=\"color: #FF8000\">// found a comment start, and we are in an array, object, or slice                                style=\"color: #0000BB\">array_push  style=\"color: #007700\">(  style=\"color: #0000BB\">$stk  style=\"color: #007700\">, array(  style=\"color: #DD0000\">'what'   style=\"color: #007700\">=    style=\"color: #0000BB\">SERVICES_JSON_IN_CMT  style=\"color: #007700\">,   style=\"color: #DD0000\">'where'   style=\"color: #007700\">=    style=\"color: #0000BB\">$c  style=\"color: #007700\">,   style=\"color: #DD0000\">'delim'   style=\"color: #007700\">=    style=\"color: #0000BB\">false  style=\"color: #007700\">));                                style=\"color: #0000BB\">$c  style=\"color: #007700\">++;                                style=\"color: #FF8000\">//print(\"Found start of comment at {$c} \");                              style=\"color: #007700\">} elseif ((  style=\"color: #0000BB\">$substr_chrs_c_2   style=\"color: #007700\">==   style=\"color: #DD0000\">'*/'  style=\"color: #007700\">)    (  style=\"color: #0000BB\">$top  style=\"color: #007700\">[  style=\"color: #DD0000\">'what'  style=\"color: #007700\">] ==   style=\"color: #0000BB\">SERVICES_JSON_IN_CMT  style=\"color: #007700\">)) {                                style=\"color: #FF8000\">// found a comment end, and we're in one now                                style=\"color: #0000BB\">array_pop  style=\"color: #007700\">(  style=\"color: #0000BB\">$stk  style=\"color: #007700\">);                                style=\"color: #0000BB\">$c  style=\"color: #007700\">++;                                for (  style=\"color: #0000BB\">$i   style=\"color: #007700\">=   style=\"color: #0000BB\">$top  style=\"color: #007700\">[  style=\"color: #DD0000\">'where'  style=\"color: #007700\">];   style=\"color: #0000BB\">$i   style=\"color: #007700\"> =   style=\"color: #0000BB\">$c  style=\"color: #007700\">; ++  style=\"color: #0000BB\">$i  style=\"color: #007700\">)                                    style=\"color: #0000BB\">$chrs   style=\"color: #007700\">=   style=\"color: #0000BB\">substr_replace  style=\"color: #007700\">(  style=\"color: #0000BB\">$chrs  style=\"color: #007700\">,   style=\"color: #DD0000\">' '  style=\"color: #007700\">,   style=\"color: #0000BB\">$i  style=\"color: #007700\">,   style=\"color: #0000BB\">1  style=\"color: #007700\">);                                  style=\"color: #FF8000\">//print(\"Found end of comment at {$c}: \".substr($chrs, $top['where'], (1 + $c - $top['where'])).\" \");                              style=\"color: #007700\">}                        }                        if (  style=\"color: #0000BB\">reset  style=\"color: #007700\">(  style=\"color: #0000BB\">$stk  style=\"color: #007700\">) ==   style=\"color: #0000BB\">SERVICES_JSON_IN_ARR  style=\"color: #007700\">) {                          return   style=\"color: #0000BB\">$arr  style=\"color: #007700\">;                        } elseif (  style=\"color: #0000BB\">reset  style=\"color: #007700\">(  style=\"color: #0000BB\">$stk  style=\"color: #007700\">) ==   style=\"color: #0000BB\">SERVICES_JSON_IN_OBJ  style=\"color: #007700\">) {                          return   style=\"color: #0000BB\">$obj  style=\"color: #007700\">;                        }                    }          }      }          style=\"color: #FF8000\">/**       * @todo Ultimately, this should just call PEAR::isError()       */        style=\"color: #007700\">function   style=\"color: #0000BB\">isError  style=\"color: #007700\">(  style=\"color: #0000BB\">$data  style=\"color: #007700\">,   style=\"color: #0000BB\">$code   style=\"color: #007700\">=   style=\"color: #0000BB\">null  style=\"color: #007700\">)      {          if (  style=\"color: #0000BB\">class_exists  style=\"color: #007700\">(  style=\"color: #DD0000\">'pear'  style=\"color: #007700\">)) {              return   style=\"color: #0000BB\">PEAR  style=\"color: #007700\">::  style=\"color: #0000BB\">isError  style=\"color: #007700\">(  style=\"color: #0000BB\">$data  style=\"color: #007700\">,   style=\"color: #0000BB\">$code  style=\"color: #007700\">);          } elseif (  style=\"color: #0000BB\">is_object  style=\"color: #007700\">(  style=\"color: #0000BB\">$data  style=\"color: #007700\">)    (  style=\"color: #0000BB\">get_class  style=\"color: #007700\">(  style=\"color: #0000BB\">$data  style=\"color: #007700\">) ==   style=\"color: #DD0000\">'services_json_error'   style=\"color: #007700\">||                                     style=\"color: #0000BB\">is_subclass_of  style=\"color: #007700\">(  style=\"color: #0000BB\">$data  style=\"color: #007700\">,   style=\"color: #DD0000\">'services_json_error'  style=\"color: #007700\">))) {              return   style=\"color: #0000BB\">true  style=\"color: #007700\">;          }            return   style=\"color: #0000BB\">false  style=\"color: #007700\">;      }  }    if (  style=\"color: #0000BB\">class_exists  style=\"color: #007700\">(  style=\"color: #DD0000\">'PEAR_Error'  style=\"color: #007700\">)) {        class   style=\"color: #0000BB\">Services_JSON_Error   style=\"color: #007700\">extends   style=\"color: #0000BB\">PEAR_Error        style=\"color: #007700\">{          function   style=\"color: #0000BB\">Services_JSON_Error  style=\"color: #007700\">(  style=\"color: #0000BB\">$message   style=\"color: #007700\">=   style=\"color: #DD0000\">'unknown error'  style=\"color: #007700\">,   style=\"color: #0000BB\">$code   style=\"color: #007700\">=   style=\"color: #0000BB\">null  style=\"color: #007700\">,                                         style=\"color: #0000BB\">$mode   style=\"color: #007700\">=   style=\"color: #0000BB\">null  style=\"color: #007700\">,   style=\"color: #0000BB\">$options   style=\"color: #007700\">=   style=\"color: #0000BB\">null  style=\"color: #007700\">,   style=\"color: #0000BB\">$userinfo   style=\"color: #007700\">=   style=\"color: #0000BB\">null  style=\"color: #007700\">)          {                style=\"color: #0000BB\">parent  style=\"color: #007700\">::  style=\"color: #0000BB\">PEAR_Error  style=\"color: #007700\">(  style=\"color: #0000BB\">$message  style=\"color: #007700\">,   style=\"color: #0000BB\">$code  style=\"color: #007700\">,   style=\"color: #0000BB\">$mode  style=\"color: #007700\">,   style=\"color: #0000BB\">$options  style=\"color: #007700\">,   style=\"color: #0000BB\">$userinfo  style=\"color: #007700\">);          }      }    } else {          style=\"color: #FF8000\">/**       * @todo Ultimately, this class shall be descended from PEAR_Error       */        style=\"color: #007700\">class   style=\"color: #0000BB\">Services_JSON_Error        style=\"color: #007700\">{          function   style=\"color: #0000BB\">Services_JSON_Error  style=\"color: #007700\">(  style=\"color: #0000BB\">$message   style=\"color: #007700\">=   style=\"color: #DD0000\">'unknown error'  style=\"color: #007700\">,   style=\"color: #0000BB\">$code   style=\"color: #007700\">=   style=\"color: #0000BB\">null  style=\"color: #007700\">,                                         style=\"color: #0000BB\">$mode   style=\"color: #007700\">=   style=\"color: #0000BB\">null  style=\"color: #007700\">,   style=\"color: #0000BB\">$options   style=\"color: #007700\">=   style=\"color: #0000BB\">null  style=\"color: #007700\">,   style=\"color: #0000BB\">$userinfo   style=\"color: #007700\">=   style=\"color: #0000BB\">null  style=\"color: #007700\">)          {            }      }    }          style=\"color: #0000BB\">?    \n",
  " \n",
  " "
]